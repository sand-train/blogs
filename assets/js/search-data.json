{
  
    
        "post0": {
            "title": "We will now train our model",
            "content": "Let&#39;s load our Dataset . import os os.listdir(&#39;./gdrive&#39;) . [&#39;Othercomputers&#39;, &#39;MyDrive&#39;, &#39;.file-revisions-by-id&#39;, &#39;.shortcut-targets-by-id&#39;, &#39;.Trash-0&#39;] . from fastai.vision.all import * path = Path(r&quot;./gdrive/MyDrive/Colab Notebooks/images/bears&quot;) # from pathlib import Path path . Path(&#39;.&#39;) . Path.BASE_PATH = path type(Path.BASE_PATH) . pathlib.PosixPath . dest = path / &#39;black&#39; / &#39;00000000.jpg&#39; im = Image.open(dest) im.to_thumb(128,128) . bear_types = &#39;grizzly&#39;,&#39;black&#39;,&#39;teddys&#39; . fns = get_image_files(path) # path, and returns a list of all of the images in that path fns[-1] . Path(&#39;teddys/00000101.png&#39;) . def parent_label_multi(file_name): return [parent_label(file_name)] #returns a list of labels based on the name of the folder a file is in . bears = DataBlock( blocks=(ImageBlock, MultiCategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label_multi, item_tfms=Resize(128)) . Datasets using the data block API . Using the bears data block, we can create a Datasets object from this by passing the source -- in this case, the path to our images. . dsets=bears.datasets(path) len(dsets.train),len(dsets.valid) . (418, 104) . dsets now contain a train and valid dataset. . x,y = dsets.train[0] x,y . (PILImage mode=RGB size=375x500, TensorMultiCategory([1., 0., 0.])) . firstSample_OH=dsets.train[0][1] firstSample_OH . TensorMultiCategory([1., 0., 0.]) . idxs = torch.where(firstSample_OH==1.)[0] dsets.train.vocab[idxs] . (#1) [&#39;black&#39;] . DataLoaders using the data block API . Now that we have a template bears in the form of a DataBlock object, we can use it to create a DataLoaders pointing to the path where the source of our data is. . Recall: . DataLoaders:: An object that contains a training DataLoader and a validation DataLoader . dls = bears.dataloaders(path) dls.train.show_batch(max_n=16, nrows=4, unique=True) . xb,yb = dls.one_batch() xb.shape,yb.shape . (torch.Size([64, 3, 128, 128]), torch.Size([64, 3])) . xb[0] . TensorImage([[[0.9961, 0.9961, 0.9961, ..., 0.9961, 0.9961, 0.9961], [0.9961, 0.9961, 0.9961, ..., 0.9961, 0.9961, 0.9961], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], ..., [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000]], [[0.9961, 0.9961, 0.9961, ..., 0.9961, 0.9961, 0.9961], [0.9961, 0.9961, 0.9961, ..., 0.9961, 0.9961, 0.9961], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], ..., [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000]], [[0.9961, 0.9961, 0.9961, ..., 0.9961, 0.9961, 0.9961], [0.9961, 0.9961, 0.9961, ..., 0.9961, 0.9961, 0.9961], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], ..., [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000]]], device=&#39;cuda:0&#39;) . yb[0] #an example row from the dependent variable . TensorMultiCategory([0., 0., 1.], device=&#39;cuda:0&#39;) . df_y_OH = pd.DataFrame(yb) df_y_OH.columns = bear_types df_y_OH.head() . grizzly black teddys . 0 0.0 | 0.0 | 1.0 | . 1 0.0 | 0.0 | 1.0 | . 2 0.0 | 0.0 | 1.0 | . 3 1.0 | 0.0 | 0.0 | . 4 0.0 | 0.0 | 1.0 | . bears.summary(path) . Setting-up type transforms pipelines Collecting items from gdrive/MyDrive/Colab Notebooks/images/bears Found 522 items 2 datasets of sizes 418,104 Setting up Pipeline: PILBase.create Setting up Pipeline: parent_label_multi -&gt; MultiCategorize -- {&#39;vocab&#39;: None, &#39;sort&#39;: True, &#39;add_na&#39;: False} -&gt; OneHotEncode -- {&#39;c&#39;: None} Building one sample Pipeline: PILBase.create starting from gdrive/MyDrive/Colab Notebooks/images/bears/black/00000015.jpg applying PILBase.create gives PILImage mode=RGB size=375x500 Pipeline: parent_label_multi -&gt; MultiCategorize -- {&#39;vocab&#39;: None, &#39;sort&#39;: True, &#39;add_na&#39;: False} -&gt; OneHotEncode -- {&#39;c&#39;: None} starting from gdrive/MyDrive/Colab Notebooks/images/bears/black/00000015.jpg applying parent_label_multi gives [black] applying MultiCategorize -- {&#39;vocab&#39;: None, &#39;sort&#39;: True, &#39;add_na&#39;: False} gives TensorMultiCategory([0]) applying OneHotEncode -- {&#39;c&#39;: None} gives TensorMultiCategory([1., 0., 0.]) Final sample: (PILImage mode=RGB size=375x500, TensorMultiCategory([1., 0., 0.])) Collecting items from gdrive/MyDrive/Colab Notebooks/images/bears Found 522 items 2 datasets of sizes 418,104 Setting up Pipeline: PILBase.create Setting up Pipeline: parent_label_multi -&gt; MultiCategorize -- {&#39;vocab&#39;: None, &#39;sort&#39;: True, &#39;add_na&#39;: False} -&gt; OneHotEncode -- {&#39;c&#39;: None} Setting up after_item: Pipeline: Resize -- {&#39;size&#39;: (128, 128), &#39;method&#39;: &#39;crop&#39;, &#39;pad_mode&#39;: &#39;reflection&#39;, &#39;resamples&#39;: (2, 0), &#39;p&#39;: 1.0} -&gt; ToTensor Setting up before_batch: Pipeline: Setting up after_batch: Pipeline: IntToFloatTensor -- {&#39;div&#39;: 255.0, &#39;div_mask&#39;: 1} Building one batch Applying item_tfms to the first sample: Pipeline: Resize -- {&#39;size&#39;: (128, 128), &#39;method&#39;: &#39;crop&#39;, &#39;pad_mode&#39;: &#39;reflection&#39;, &#39;resamples&#39;: (2, 0), &#39;p&#39;: 1.0} -&gt; ToTensor starting from (PILImage mode=RGB size=375x500, TensorMultiCategory([1., 0., 0.])) applying Resize -- {&#39;size&#39;: (128, 128), &#39;method&#39;: &#39;crop&#39;, &#39;pad_mode&#39;: &#39;reflection&#39;, &#39;resamples&#39;: (2, 0), &#39;p&#39;: 1.0} gives (PILImage mode=RGB size=128x128, TensorMultiCategory([1., 0., 0.])) applying ToTensor gives (TensorImage of size 3x128x128, TensorMultiCategory([1., 0., 0.])) Adding the next 3 samples No before_batch transform to apply Collating items in a batch Applying batch_tfms to the batch built Pipeline: IntToFloatTensor -- {&#39;div&#39;: 255.0, &#39;div_mask&#39;: 1} starting from (TensorImage of size 4x3x128x128, TensorMultiCategory of size 4x3) applying IntToFloatTensor -- {&#39;div&#39;: 255.0, &#39;div_mask&#39;: 1} gives (TensorImage of size 4x3x128x128, TensorMultiCategory of size 4x3) . Let&#39;s train our model . We will find a learning rate using learn.lr_find() . learn = cnn_learner(dls, resnet50, metrics=partial(accuracy_multi), ) # cbs=[WandbCallback(), SaveModelCallback()]) learn.lr_find() . Downloading: &#34;https://download.pytorch.org/models/resnet50-0676ba61.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet50-0676ba61.pth /usr/local/lib/python3.7/dist-packages/torch/nn/functional.py:718: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at /pytorch/c10/core/TensorImpl.h:1156.) return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode) . SuggestedLRs(valley=0.0003981071640737355) . learn = cnn_learner(dls, resnet50, metrics=partial(accuracy_multi), #cbs=[WandbCallback(), SaveModelCallback()] ) learn.fine_tune(5, base_lr=0.0003981071640737355, freeze_epochs=4) . epoch train_loss valid_loss accuracy_multi time . 0 | 0.989574 | 0.675743 | 0.628205 | 00:19 | . 1 | 0.810696 | 0.264667 | 0.887821 | 00:05 | . 2 | 0.627263 | 0.161804 | 0.948718 | 00:05 | . 3 | 0.490887 | 0.135624 | 0.958333 | 00:05 | . epoch train_loss valid_loss accuracy_multi time . 0 | 0.164186 | 0.131268 | 0.951923 | 00:06 | . 1 | 0.137333 | 0.127039 | 0.955128 | 00:06 | . 2 | 0.117020 | 0.116154 | 0.961538 | 00:06 | . 3 | 0.102201 | 0.112964 | 0.964744 | 00:06 | . 4 | 0.097269 | 0.109486 | 0.967949 | 00:06 | . Let&#39;s get predictions . preds, targs = learn.get_preds() xs = torch.linspace(0.05, 0.95, 10000) accs = [accuracy_multi(preds, targs, thresh=i, sigmoid=False) for i in xs] plt.plot(xs, accs) . [&lt;matplotlib.lines.Line2D at 0x7fda9365f310&gt;] . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . Let&#39;s use our trained model and classify some images . uploader = widgets.FileUpload() uploader . img = PILImage.create(uploader.data[0]) img.to_thumb(512) . learn.predict(img) . ((#0) [], tensor([False, False, False]), tensor([0.1184, 0.4531, 0.0730])) . img = PILImage.create(uploader.data[0]) img.to_thumb(512) . learn.predict(img) . ((#1) [&#39;grizzly&#39;], tensor([False, True, False]), tensor([0.0252, 0.9968, 0.0782])) . We can see our classifier has some limitations when it is presented with an image of a panda; it thinks it is a Black bear! . TODO: Need to assign different labels img = PILImage.create(uploader.data[0]) img.to_thumb(512) . learn.predict(img) . ((#1) [&#39;black&#39;], tensor([ True, False, False]), tensor([0.9285, 0.2594, 0.2288])) .",
            "url": "https://sand-train.github.io/blogs/2021/08/29/Bear_Classifier.html",
            "relUrl": "/2021/08/29/Bear_Classifier.html",
            "date": " • Aug 29, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Bear Classifier",
            "content": "Let&#39;s load our Dataset . import os os.listdir(&#39;./gdrive&#39;) . [&#39;Othercomputers&#39;, &#39;MyDrive&#39;, &#39;.file-revisions-by-id&#39;, &#39;.shortcut-targets-by-id&#39;, &#39;.Trash-0&#39;] . from fastai.vision.all import * path = Path(r&quot;./gdrive/MyDrive/Colab Notebooks/images/bears&quot;) # from pathlib import Path path . Path(&#39;.&#39;) . Path.BASE_PATH = path type(Path.BASE_PATH) . pathlib.PosixPath . dest = path / &#39;black&#39; / &#39;00000000.jpg&#39; im = Image.open(dest) im.to_thumb(128,128) . bear_types = &#39;grizzly&#39;,&#39;black&#39;,&#39;teddys&#39; . fns = get_image_files(path) # path, and returns a list of all of the images in that path fns[-1] . Path(&#39;teddys/00000101.png&#39;) . def parent_label_multi(file_name): return [parent_label(file_name)] #returns a list of labels based on the name of the folder a file is in . bears = DataBlock( blocks=(ImageBlock, MultiCategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label_multi, item_tfms=Resize(128)) . Datasets using the data block API . Using the bears data block, we can create a Datasets object from this by passing the source -- in this case, the path to our images. . dsets=bears.datasets(path) len(dsets.train),len(dsets.valid) . (418, 104) . dsets now contain a train and valid dataset. . x,y = dsets.train[0] x,y . (PILImage mode=RGB size=375x500, TensorMultiCategory([1., 0., 0.])) . firstSample_OH=dsets.train[0][1] firstSample_OH . TensorMultiCategory([1., 0., 0.]) . idxs = torch.where(firstSample_OH==1.)[0] dsets.train.vocab[idxs] . (#1) [&#39;black&#39;] . DataLoaders using the data block API . Now that we have a template bears in the form of a DataBlock object, we can use it to create a DataLoaders pointing to the path where the source of our data is. . Recall: . DataLoaders:: An object that contains a training DataLoader and a validation DataLoader . dls = bears.dataloaders(path) dls.train.show_batch(max_n=16, nrows=4, unique=True) . xb,yb = dls.one_batch() xb.shape,yb.shape . (torch.Size([64, 3, 128, 128]), torch.Size([64, 3])) . xb[0] . TensorImage([[[0.9961, 0.9961, 0.9961, ..., 0.9961, 0.9961, 0.9961], [0.9961, 0.9961, 0.9961, ..., 0.9961, 0.9961, 0.9961], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], ..., [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000]], [[0.9961, 0.9961, 0.9961, ..., 0.9961, 0.9961, 0.9961], [0.9961, 0.9961, 0.9961, ..., 0.9961, 0.9961, 0.9961], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], ..., [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000]], [[0.9961, 0.9961, 0.9961, ..., 0.9961, 0.9961, 0.9961], [0.9961, 0.9961, 0.9961, ..., 0.9961, 0.9961, 0.9961], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], ..., [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000]]], device=&#39;cuda:0&#39;) . yb[0] #an example row from the dependent variable . TensorMultiCategory([0., 0., 1.], device=&#39;cuda:0&#39;) . df_y_OH = pd.DataFrame(yb) df_y_OH.columns = bear_types df_y_OH.head() . grizzly black teddys . 0 0.0 | 0.0 | 1.0 | . 1 0.0 | 0.0 | 1.0 | . 2 0.0 | 0.0 | 1.0 | . 3 1.0 | 0.0 | 0.0 | . 4 0.0 | 0.0 | 1.0 | . bears.summary(path) . Setting-up type transforms pipelines Collecting items from gdrive/MyDrive/Colab Notebooks/images/bears Found 522 items 2 datasets of sizes 418,104 Setting up Pipeline: PILBase.create Setting up Pipeline: parent_label_multi -&gt; MultiCategorize -- {&#39;vocab&#39;: None, &#39;sort&#39;: True, &#39;add_na&#39;: False} -&gt; OneHotEncode -- {&#39;c&#39;: None} Building one sample Pipeline: PILBase.create starting from gdrive/MyDrive/Colab Notebooks/images/bears/black/00000015.jpg applying PILBase.create gives PILImage mode=RGB size=375x500 Pipeline: parent_label_multi -&gt; MultiCategorize -- {&#39;vocab&#39;: None, &#39;sort&#39;: True, &#39;add_na&#39;: False} -&gt; OneHotEncode -- {&#39;c&#39;: None} starting from gdrive/MyDrive/Colab Notebooks/images/bears/black/00000015.jpg applying parent_label_multi gives [black] applying MultiCategorize -- {&#39;vocab&#39;: None, &#39;sort&#39;: True, &#39;add_na&#39;: False} gives TensorMultiCategory([0]) applying OneHotEncode -- {&#39;c&#39;: None} gives TensorMultiCategory([1., 0., 0.]) Final sample: (PILImage mode=RGB size=375x500, TensorMultiCategory([1., 0., 0.])) Collecting items from gdrive/MyDrive/Colab Notebooks/images/bears Found 522 items 2 datasets of sizes 418,104 Setting up Pipeline: PILBase.create Setting up Pipeline: parent_label_multi -&gt; MultiCategorize -- {&#39;vocab&#39;: None, &#39;sort&#39;: True, &#39;add_na&#39;: False} -&gt; OneHotEncode -- {&#39;c&#39;: None} Setting up after_item: Pipeline: Resize -- {&#39;size&#39;: (128, 128), &#39;method&#39;: &#39;crop&#39;, &#39;pad_mode&#39;: &#39;reflection&#39;, &#39;resamples&#39;: (2, 0), &#39;p&#39;: 1.0} -&gt; ToTensor Setting up before_batch: Pipeline: Setting up after_batch: Pipeline: IntToFloatTensor -- {&#39;div&#39;: 255.0, &#39;div_mask&#39;: 1} Building one batch Applying item_tfms to the first sample: Pipeline: Resize -- {&#39;size&#39;: (128, 128), &#39;method&#39;: &#39;crop&#39;, &#39;pad_mode&#39;: &#39;reflection&#39;, &#39;resamples&#39;: (2, 0), &#39;p&#39;: 1.0} -&gt; ToTensor starting from (PILImage mode=RGB size=375x500, TensorMultiCategory([1., 0., 0.])) applying Resize -- {&#39;size&#39;: (128, 128), &#39;method&#39;: &#39;crop&#39;, &#39;pad_mode&#39;: &#39;reflection&#39;, &#39;resamples&#39;: (2, 0), &#39;p&#39;: 1.0} gives (PILImage mode=RGB size=128x128, TensorMultiCategory([1., 0., 0.])) applying ToTensor gives (TensorImage of size 3x128x128, TensorMultiCategory([1., 0., 0.])) Adding the next 3 samples No before_batch transform to apply Collating items in a batch Applying batch_tfms to the batch built Pipeline: IntToFloatTensor -- {&#39;div&#39;: 255.0, &#39;div_mask&#39;: 1} starting from (TensorImage of size 4x3x128x128, TensorMultiCategory of size 4x3) applying IntToFloatTensor -- {&#39;div&#39;: 255.0, &#39;div_mask&#39;: 1} gives (TensorImage of size 4x3x128x128, TensorMultiCategory of size 4x3) . Let&#39;s train our model . We will find a learning rate using learn.lr_find() . learn = cnn_learner(dls, resnet50, metrics=partial(accuracy_multi), ) # cbs=[WandbCallback(), SaveModelCallback()]) learn.lr_find() . Downloading: &#34;https://download.pytorch.org/models/resnet50-0676ba61.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet50-0676ba61.pth /usr/local/lib/python3.7/dist-packages/torch/nn/functional.py:718: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at /pytorch/c10/core/TensorImpl.h:1156.) return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode) . SuggestedLRs(valley=0.0003981071640737355) . We will now train our model . learn = cnn_learner(dls, resnet50, metrics=partial(accuracy_multi), #cbs=[WandbCallback(), SaveModelCallback()] ) learn.fine_tune(5, base_lr=0.0003981071640737355, freeze_epochs=4) . epoch train_loss valid_loss accuracy_multi time . 0 | 0.989574 | 0.675743 | 0.628205 | 00:19 | . 1 | 0.810696 | 0.264667 | 0.887821 | 00:05 | . 2 | 0.627263 | 0.161804 | 0.948718 | 00:05 | . 3 | 0.490887 | 0.135624 | 0.958333 | 00:05 | . epoch train_loss valid_loss accuracy_multi time . 0 | 0.164186 | 0.131268 | 0.951923 | 00:06 | . 1 | 0.137333 | 0.127039 | 0.955128 | 00:06 | . 2 | 0.117020 | 0.116154 | 0.961538 | 00:06 | . 3 | 0.102201 | 0.112964 | 0.964744 | 00:06 | . 4 | 0.097269 | 0.109486 | 0.967949 | 00:06 | . Let&#39;s get predictions . preds, targs = learn.get_preds() xs = torch.linspace(0.05, 0.95, 10000) accs = [accuracy_multi(preds, targs, thresh=i, sigmoid=False) for i in xs] plt.plot(xs, accs) . [&lt;matplotlib.lines.Line2D at 0x7fda9365f310&gt;] . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . Let&#39;s use our trained model and classify some images . uploader = widgets.FileUpload() uploader . img = PILImage.create(uploader.data[0]) img.to_thumb(512) . learn.predict(img) . ((#0) [], tensor([False, False, False]), tensor([0.1184, 0.4531, 0.0730])) . img = PILImage.create(uploader.data[0]) img.to_thumb(512) . learn.predict(img) . ((#1) [&#39;grizzly&#39;], tensor([False, True, False]), tensor([0.0252, 0.9968, 0.0782])) . We can see our classifier has some limitations when it is presented with an image of a panda; it thinks it is a Black bear! . TODO: Need to assign different labels img = PILImage.create(uploader.data[0]) img.to_thumb(512) . learn.predict(img) . ((#1) [&#39;black&#39;], tensor([ True, False, False]), tensor([0.9285, 0.2594, 0.2288])) .",
            "url": "https://sand-train.github.io/blogs/2021/08/29/Bear-Classifier.html",
            "relUrl": "/2021/08/29/Bear-Classifier.html",
            "date": " • Aug 29, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sand-train.github.io/blogs/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sand-train.github.io/blogs/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sand-train.github.io/blogs/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sand-train.github.io/blogs/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}