{
  
    
        "post0": {
            "title": "Effective Pandas",
            "content": "Summary . Correct types save space and enable convenient math, strong and date functionality | Chaining operations will: Make code readable | Remove bugs | Easier to debug | . | Don&#39;t mutate (there&#39;s no point). Embrace chaining | .apply is slow for math | Aggregations are powerful. Play wait them until they make sense. | . %matplotlib inline from IPython.display import display import numpy as np import pandas as pd . Recipe: . run through dataframe and clean using: . assign, astype, drop, etc . | Use a single function to encapsulate step 1. This is now reusable! . | pd.__version__ pd.options.display.min_rows=20 . autos = pd.read_csv(&#39;/Users/ficus/Data/autos/vehicles.csv&#39;) . /Users/ficus/opt/anaconda3/envs/ml-starter/lib/python3.9/site-packages/IPython/core/interactiveshell.py:3441: DtypeWarning: Columns (68,70,71,72,73,74,76,79) have mixed types.Specify dtype option on import or set low_memory=False. exec(code_obj, self.user_global_ns, self.user_ns) . autos . barrels08 barrelsA08 charge120 charge240 city08 city08U cityA08 cityA08U cityCD cityE ... mfrCode c240Dscr charge240b c240bDscr createdOn modifiedOn startStop phevCity phevHwy phevComb . 0 15.695714 | 0.0 | 0.0 | 0.0 | 19 | 0.0 | 0 | 0.0 | 0.0 | 0.0 | ... | NaN | NaN | 0.0 | NaN | Tue Jan 01 00:00:00 EST 2013 | Tue Jan 01 00:00:00 EST 2013 | NaN | 0 | 0 | 0 | . 1 29.964545 | 0.0 | 0.0 | 0.0 | 9 | 0.0 | 0 | 0.0 | 0.0 | 0.0 | ... | NaN | NaN | 0.0 | NaN | Tue Jan 01 00:00:00 EST 2013 | Tue Jan 01 00:00:00 EST 2013 | NaN | 0 | 0 | 0 | . 2 12.207778 | 0.0 | 0.0 | 0.0 | 23 | 0.0 | 0 | 0.0 | 0.0 | 0.0 | ... | NaN | NaN | 0.0 | NaN | Tue Jan 01 00:00:00 EST 2013 | Tue Jan 01 00:00:00 EST 2013 | NaN | 0 | 0 | 0 | . 3 29.964545 | 0.0 | 0.0 | 0.0 | 10 | 0.0 | 0 | 0.0 | 0.0 | 0.0 | ... | NaN | NaN | 0.0 | NaN | Tue Jan 01 00:00:00 EST 2013 | Tue Jan 01 00:00:00 EST 2013 | NaN | 0 | 0 | 0 | . 4 17.347895 | 0.0 | 0.0 | 0.0 | 17 | 0.0 | 0 | 0.0 | 0.0 | 0.0 | ... | NaN | NaN | 0.0 | NaN | Tue Jan 01 00:00:00 EST 2013 | Tue Jan 01 00:00:00 EST 2013 | NaN | 0 | 0 | 0 | . 5 14.982273 | 0.0 | 0.0 | 0.0 | 21 | 0.0 | 0 | 0.0 | 0.0 | 0.0 | ... | NaN | NaN | 0.0 | NaN | Tue Jan 01 00:00:00 EST 2013 | Tue Jan 01 00:00:00 EST 2013 | NaN | 0 | 0 | 0 | . 6 13.184400 | 0.0 | 0.0 | 0.0 | 22 | 0.0 | 0 | 0.0 | 0.0 | 0.0 | ... | NaN | NaN | 0.0 | NaN | Tue Jan 01 00:00:00 EST 2013 | Tue Jan 01 00:00:00 EST 2013 | NaN | 0 | 0 | 0 | . 7 13.733750 | 0.0 | 0.0 | 0.0 | 23 | 0.0 | 0 | 0.0 | 0.0 | 0.0 | ... | NaN | NaN | 0.0 | NaN | Tue Jan 01 00:00:00 EST 2013 | Tue Jan 01 00:00:00 EST 2013 | NaN | 0 | 0 | 0 | . 8 12.677308 | 0.0 | 0.0 | 0.0 | 23 | 0.0 | 0 | 0.0 | 0.0 | 0.0 | ... | NaN | NaN | 0.0 | NaN | Tue Jan 01 00:00:00 EST 2013 | Tue Jan 01 00:00:00 EST 2013 | NaN | 0 | 0 | 0 | . 9 13.184400 | 0.0 | 0.0 | 0.0 | 23 | 0.0 | 0 | 0.0 | 0.0 | 0.0 | ... | NaN | NaN | 0.0 | NaN | Tue Jan 01 00:00:00 EST 2013 | Tue Jan 01 00:00:00 EST 2013 | NaN | 0 | 0 | 0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 41134 16.480500 | 0.0 | 0.0 | 0.0 | 18 | 0.0 | 0 | 0.0 | 0.0 | 0.0 | ... | NaN | NaN | 0.0 | NaN | Tue Jan 01 00:00:00 EST 2013 | Tue Jan 01 00:00:00 EST 2013 | NaN | 0 | 0 | 0 | . 41135 12.677308 | 0.0 | 0.0 | 0.0 | 23 | 0.0 | 0 | 0.0 | 0.0 | 0.0 | ... | NaN | NaN | 0.0 | NaN | Tue Jan 01 00:00:00 EST 2013 | Tue Jan 01 00:00:00 EST 2013 | NaN | 0 | 0 | 0 | . 41136 13.733750 | 0.0 | 0.0 | 0.0 | 21 | 0.0 | 0 | 0.0 | 0.0 | 0.0 | ... | NaN | NaN | 0.0 | NaN | Tue Jan 01 00:00:00 EST 2013 | Tue Jan 01 00:00:00 EST 2013 | NaN | 0 | 0 | 0 | . 41137 11.771786 | 0.0 | 0.0 | 0.0 | 24 | 0.0 | 0 | 0.0 | 0.0 | 0.0 | ... | NaN | NaN | 0.0 | NaN | Tue Jan 01 00:00:00 EST 2013 | Tue Jan 01 00:00:00 EST 2013 | NaN | 0 | 0 | 0 | . 41138 13.184400 | 0.0 | 0.0 | 0.0 | 21 | 0.0 | 0 | 0.0 | 0.0 | 0.0 | ... | NaN | NaN | 0.0 | NaN | Tue Jan 01 00:00:00 EST 2013 | Tue Jan 01 00:00:00 EST 2013 | NaN | 0 | 0 | 0 | . 41139 14.982273 | 0.0 | 0.0 | 0.0 | 19 | 0.0 | 0 | 0.0 | 0.0 | 0.0 | ... | NaN | NaN | 0.0 | NaN | Tue Jan 01 00:00:00 EST 2013 | Tue Jan 01 00:00:00 EST 2013 | NaN | 0 | 0 | 0 | . 41140 14.330870 | 0.0 | 0.0 | 0.0 | 20 | 0.0 | 0 | 0.0 | 0.0 | 0.0 | ... | NaN | NaN | 0.0 | NaN | Tue Jan 01 00:00:00 EST 2013 | Tue Jan 01 00:00:00 EST 2013 | NaN | 0 | 0 | 0 | . 41141 15.695714 | 0.0 | 0.0 | 0.0 | 18 | 0.0 | 0 | 0.0 | 0.0 | 0.0 | ... | NaN | NaN | 0.0 | NaN | Tue Jan 01 00:00:00 EST 2013 | Tue Jan 01 00:00:00 EST 2013 | NaN | 0 | 0 | 0 | . 41142 15.695714 | 0.0 | 0.0 | 0.0 | 18 | 0.0 | 0 | 0.0 | 0.0 | 0.0 | ... | NaN | NaN | 0.0 | NaN | Tue Jan 01 00:00:00 EST 2013 | Tue Jan 01 00:00:00 EST 2013 | NaN | 0 | 0 | 0 | . 41143 18.311667 | 0.0 | 0.0 | 0.0 | 16 | 0.0 | 0 | 0.0 | 0.0 | 0.0 | ... | NaN | NaN | 0.0 | NaN | Tue Jan 01 00:00:00 EST 2013 | Tue Jan 01 00:00:00 EST 2013 | NaN | 0 | 0 | 0 | . 41144 rows × 83 columns . autos.columns . Index([&#39;barrels08&#39;, &#39;barrelsA08&#39;, &#39;charge120&#39;, &#39;charge240&#39;, &#39;city08&#39;, &#39;city08U&#39;, &#39;cityA08&#39;, &#39;cityA08U&#39;, &#39;cityCD&#39;, &#39;cityE&#39;, &#39;cityUF&#39;, &#39;co2&#39;, &#39;co2A&#39;, &#39;co2TailpipeAGpm&#39;, &#39;co2TailpipeGpm&#39;, &#39;comb08&#39;, &#39;comb08U&#39;, &#39;combA08&#39;, &#39;combA08U&#39;, &#39;combE&#39;, &#39;combinedCD&#39;, &#39;combinedUF&#39;, &#39;cylinders&#39;, &#39;displ&#39;, &#39;drive&#39;, &#39;engId&#39;, &#39;eng_dscr&#39;, &#39;feScore&#39;, &#39;fuelCost08&#39;, &#39;fuelCostA08&#39;, &#39;fuelType&#39;, &#39;fuelType1&#39;, &#39;ghgScore&#39;, &#39;ghgScoreA&#39;, &#39;highway08&#39;, &#39;highway08U&#39;, &#39;highwayA08&#39;, &#39;highwayA08U&#39;, &#39;highwayCD&#39;, &#39;highwayE&#39;, &#39;highwayUF&#39;, &#39;hlv&#39;, &#39;hpv&#39;, &#39;id&#39;, &#39;lv2&#39;, &#39;lv4&#39;, &#39;make&#39;, &#39;model&#39;, &#39;mpgData&#39;, &#39;phevBlended&#39;, &#39;pv2&#39;, &#39;pv4&#39;, &#39;range&#39;, &#39;rangeCity&#39;, &#39;rangeCityA&#39;, &#39;rangeHwy&#39;, &#39;rangeHwyA&#39;, &#39;trany&#39;, &#39;UCity&#39;, &#39;UCityA&#39;, &#39;UHighway&#39;, &#39;UHighwayA&#39;, &#39;VClass&#39;, &#39;year&#39;, &#39;youSaveSpend&#39;, &#39;guzzler&#39;, &#39;trans_dscr&#39;, &#39;tCharger&#39;, &#39;sCharger&#39;, &#39;atvType&#39;, &#39;fuelType2&#39;, &#39;rangeA&#39;, &#39;evMotor&#39;, &#39;mfrCode&#39;, &#39;c240Dscr&#39;, &#39;charge240b&#39;, &#39;c240bDscr&#39;, &#39;createdOn&#39;, &#39;modifiedOn&#39;, &#39;startStop&#39;, &#39;phevCity&#39;, &#39;phevHwy&#39;, &#39;phevComb&#39;], dtype=&#39;object&#39;) . cols = [&#39;city08&#39;, &#39;comb08&#39;, &#39;highway08&#39;, &#39;cylinders&#39;, &#39;displ&#39;, &#39;drive&#39;,&#39;eng_dscr&#39;, &#39;fuelCost08&#39;,&#39;make&#39;, &#39;model&#39;, &#39;trany&#39;, &#39;range&#39;, &#39;createdOn&#39;, &#39;year&#39;] . autos[cols].dtypes # pandas will treat each column as a data type that numpy can read. . city08 int64 comb08 int64 highway08 int64 cylinders float64 displ float64 drive object eng_dscr object fuelCost08 int64 make object model object trany object range int64 createdOn object year int64 dtype: object . autos[cols].memory_usage(deep=True) . Index 128 city08 329152 comb08 329152 highway08 329152 cylinders 329152 displ 329152 drive 3028369 eng_dscr 2135693 fuelCost08 329152 make 2606267 model 2813134 trany 2933276 range 329152 createdOn 3497240 year 329152 dtype: int64 . autos[cols].memory_usage(deep=True).sum() . 19647323 . Let&#39;s look into Int data types . autos[cols].select_dtypes(int).describe() . city08 comb08 highway08 fuelCost08 range year . count 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | . mean 18.369045 | 20.616396 | 24.504667 | 2362.335942 | 0.793506 | 2001.535266 | . std 7.905886 | 7.674535 | 7.730364 | 654.981925 | 13.041592 | 11.142414 | . min 6.000000 | 7.000000 | 9.000000 | 500.000000 | 0.000000 | 1984.000000 | . 25% 15.000000 | 17.000000 | 20.000000 | 1900.000000 | 0.000000 | 1991.000000 | . 50% 17.000000 | 20.000000 | 24.000000 | 2350.000000 | 0.000000 | 2002.000000 | . 75% 20.000000 | 23.000000 | 28.000000 | 2700.000000 | 0.000000 | 2011.000000 | . max 150.000000 | 136.000000 | 124.000000 | 7400.000000 | 370.000000 | 2020.000000 | . (autos [cols] # get columns we want .select_dtypes(int) # select columns with int data types .describe() ) #count is number of non-missing numbers . city08 comb08 highway08 fuelCost08 range year . count 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | . mean 18.369045 | 20.616396 | 24.504667 | 2362.335942 | 0.793506 | 2001.535266 | . std 7.905886 | 7.674535 | 7.730364 | 654.981925 | 13.041592 | 11.142414 | . min 6.000000 | 7.000000 | 9.000000 | 500.000000 | 0.000000 | 1984.000000 | . 25% 15.000000 | 17.000000 | 20.000000 | 1900.000000 | 0.000000 | 1991.000000 | . 50% 17.000000 | 20.000000 | 24.000000 | 2350.000000 | 0.000000 | 2002.000000 | . 75% 20.000000 | 23.000000 | 28.000000 | 2700.000000 | 0.000000 | 2011.000000 | . max 150.000000 | 136.000000 | 124.000000 | 7400.000000 | 370.000000 | 2020.000000 | . We can save most of the data using int8 to save some memory . Look at the min,max values. . np.iinfo(np.int8) . iinfo(min=-128, max=127, dtype=int8) . np.iinfo(np.int8) . iinfo(min=-128, max=127, dtype=int8) . (autos [cols] .astype({&#39;highway08&#39;:&#39;int8&#39;, &#39;city08&#39;:&#39;int16&#39;, &#39;comb08&#39;:&#39;int16&#39;}) .select_dtypes([int, &#39;int8&#39;]) #int is default int64 .describe() ) . highway08 fuelCost08 range year . count 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | . mean 24.504667 | 2362.335942 | 0.793506 | 2001.535266 | . std 7.730364 | 654.981925 | 13.041592 | 11.142414 | . min 9.000000 | 500.000000 | 0.000000 | 1984.000000 | . 25% 20.000000 | 1900.000000 | 0.000000 | 1991.000000 | . 50% 24.000000 | 2350.000000 | 0.000000 | 2002.000000 | . 75% 28.000000 | 2700.000000 | 0.000000 | 2011.000000 | . max 124.000000 | 7400.000000 | 370.000000 | 2020.000000 | . (autos [cols] .astype({&#39;highway08&#39;:&#39;int8&#39;, &#39;city08&#39;:&#39;int16&#39;, &#39;comb08&#39;:&#39;int16&#39;}) .select_dtypes([&#39;integer&#39;]) .describe() ) . city08 comb08 highway08 fuelCost08 range year . count 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | . mean 18.369045 | 20.616396 | 24.504667 | 2362.335942 | 0.793506 | 2001.535266 | . std 7.905886 | 7.674535 | 7.730364 | 654.981925 | 13.041592 | 11.142414 | . min 6.000000 | 7.000000 | 9.000000 | 500.000000 | 0.000000 | 1984.000000 | . 25% 15.000000 | 17.000000 | 20.000000 | 1900.000000 | 0.000000 | 1991.000000 | . 50% 17.000000 | 20.000000 | 24.000000 | 2350.000000 | 0.000000 | 2002.000000 | . 75% 20.000000 | 23.000000 | 28.000000 | 2700.000000 | 0.000000 | 2011.000000 | . max 150.000000 | 136.000000 | 124.000000 | 7400.000000 | 370.000000 | 2020.000000 | . Let us look at floats . (autos [cols] .select_dtypes([&#39;float&#39;]) ) . cylinders displ . 0 4.0 | 2.0 | . 1 12.0 | 4.9 | . 2 4.0 | 2.2 | . 3 8.0 | 5.2 | . 4 4.0 | 2.2 | . 5 4.0 | 1.8 | . 6 4.0 | 1.8 | . 7 4.0 | 1.6 | . 8 4.0 | 1.6 | . 9 4.0 | 1.8 | . ... ... | ... | . 41134 4.0 | 2.1 | . 41135 4.0 | 1.9 | . 41136 4.0 | 1.9 | . 41137 4.0 | 1.9 | . 41138 4.0 | 1.9 | . 41139 4.0 | 2.2 | . 41140 4.0 | 2.2 | . 41141 4.0 | 2.2 | . 41142 4.0 | 2.2 | . 41143 4.0 | 2.2 | . 41144 rows × 2 columns . Cylinders -- let us look at the number of missing and non-missing values . autos.cylinders.describe() # we can see there are some missing values as shown by count in comparison to the number of rows above. . count 40938.000000 mean 5.717084 std 1.755517 min 2.000000 25% 4.000000 50% 6.000000 75% 6.000000 max 16.000000 Name: cylinders, dtype: float64 . autos.cylinders.value_counts(dropna=False) . 4.0 15938 6.0 14284 8.0 8801 5.0 771 12.0 626 3.0 279 NaN 206 10.0 170 2.0 59 16.0 10 Name: cylinders, dtype: int64 . # [cols] # .query(&#39;cylinders.isna()&#39;) # ) #NOT WORKING . (autos [cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;) #displ = displacement ) .astype({&#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;:&#39;int16&#39;}) .describe() ) . city08 comb08 highway08 cylinders displ fuelCost08 range year . count 41144.000000 | 41144.000000 | 41144.000000 | 41144.000000 | 4.114400e+04 | 41144.000000 | 41144.000000 | 41144.000000 | . mean 18.369045 | 20.616396 | 24.504667 | 5.688460 | inf | 2362.335942 | 0.793506 | 2001.535266 | . std 7.905886 | 7.674535 | 7.730364 | 1.797009 | 1.373047e+00 | 654.981925 | 13.041592 | 11.142414 | . min 6.000000 | 7.000000 | 9.000000 | 0.000000 | 0.000000e+00 | 500.000000 | 0.000000 | 1984.000000 | . 25% 15.000000 | 17.000000 | 20.000000 | 4.000000 | 2.199219e+00 | 1900.000000 | 0.000000 | 1991.000000 | . 50% 17.000000 | 20.000000 | 24.000000 | 6.000000 | 3.000000e+00 | 2350.000000 | 0.000000 | 2002.000000 | . 75% 20.000000 | 23.000000 | 28.000000 | 6.000000 | 4.300781e+00 | 2700.000000 | 0.000000 | 2011.000000 | . max 150.000000 | 136.000000 | 124.000000 | 16.000000 | 8.398438e+00 | 7400.000000 | 370.000000 | 2020.000000 | . autos[cols].dtypes # for some reason the new data type for &#39;displ&#39; is not showing correctly -- need to check this!! . city08 int64 comb08 int64 highway08 int64 cylinders float64 displ float64 drive object eng_dscr object fuelCost08 int64 make object model object trany object range int64 createdOn object year int64 dtype: object . (autos [cols] .select_dtypes(object) ) . drive eng_dscr make model trany createdOn . 0 Rear-Wheel Drive | (FFS) | Alfa Romeo | Spider Veloce 2000 | Manual 5-spd | Tue Jan 01 00:00:00 EST 2013 | . 1 Rear-Wheel Drive | (GUZZLER) | Ferrari | Testarossa | Manual 5-spd | Tue Jan 01 00:00:00 EST 2013 | . 2 Front-Wheel Drive | (FFS) | Dodge | Charger | Manual 5-spd | Tue Jan 01 00:00:00 EST 2013 | . 3 Rear-Wheel Drive | NaN | Dodge | B150/B250 Wagon 2WD | Automatic 3-spd | Tue Jan 01 00:00:00 EST 2013 | . 4 4-Wheel or All-Wheel Drive | (FFS,TRBO) | Subaru | Legacy AWD Turbo | Manual 5-spd | Tue Jan 01 00:00:00 EST 2013 | . 5 Front-Wheel Drive | (FFS) | Subaru | Loyale | Automatic 3-spd | Tue Jan 01 00:00:00 EST 2013 | . 6 Front-Wheel Drive | (FFS) | Subaru | Loyale | Manual 5-spd | Tue Jan 01 00:00:00 EST 2013 | . 7 Front-Wheel Drive | (FFS) | Toyota | Corolla | Automatic 3-spd | Tue Jan 01 00:00:00 EST 2013 | . 8 Front-Wheel Drive | (FFS) | Toyota | Corolla | Manual 5-spd | Tue Jan 01 00:00:00 EST 2013 | . 9 Front-Wheel Drive | (FFS) | Toyota | Corolla | Automatic 4-spd | Tue Jan 01 00:00:00 EST 2013 | . ... ... | ... | ... | ... | ... | ... | . 41134 Front-Wheel Drive | (FFS) | Saab | 900 | Manual 5-spd | Tue Jan 01 00:00:00 EST 2013 | . 41135 Front-Wheel Drive | (TBI) (FFS) | Saturn | SL | Automatic 4-spd | Tue Jan 01 00:00:00 EST 2013 | . 41136 Front-Wheel Drive | (MFI) (FFS) | Saturn | SL | Automatic 4-spd | Tue Jan 01 00:00:00 EST 2013 | . 41137 Front-Wheel Drive | (TBI) (FFS) | Saturn | SL | Manual 5-spd | Tue Jan 01 00:00:00 EST 2013 | . 41138 Front-Wheel Drive | (MFI) (FFS) | Saturn | SL | Manual 5-spd | Tue Jan 01 00:00:00 EST 2013 | . 41139 Front-Wheel Drive | (FFS) | Subaru | Legacy | Automatic 4-spd | Tue Jan 01 00:00:00 EST 2013 | . 41140 Front-Wheel Drive | (FFS) | Subaru | Legacy | Manual 5-spd | Tue Jan 01 00:00:00 EST 2013 | . 41141 4-Wheel or All-Wheel Drive | (FFS) | Subaru | Legacy AWD | Automatic 4-spd | Tue Jan 01 00:00:00 EST 2013 | . 41142 4-Wheel or All-Wheel Drive | (FFS) | Subaru | Legacy AWD | Manual 5-spd | Tue Jan 01 00:00:00 EST 2013 | . 41143 4-Wheel or All-Wheel Drive | (FFS,TRBO) | Subaru | Legacy AWD Turbo | Automatic 4-spd | Tue Jan 01 00:00:00 EST 2013 | . 41144 rows × 6 columns . autos.model.nunique() . 4058 . (autos.drive.value_counts(dropna=False)) . Front-Wheel Drive 14236 Rear-Wheel Drive 13831 4-Wheel or All-Wheel Drive 6648 All-Wheel Drive 3015 4-Wheel Drive 1460 NaN 1189 2-Wheel Drive 507 Part-time 4-Wheel Drive 258 Name: drive, dtype: int64 . # (autos # [cols] # .query(&#39;drive.isna()&#39;)) #NOT WORKING . (autos [cols].groupby(&#39;year&#39;) .drive .unique()) . year 1984 [nan, 2-Wheel Drive, Rear-Wheel Drive, 4-Wheel... 1985 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 1986 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 1987 [Rear-Wheel Drive, 4-Wheel or All-Wheel Drive,... 1988 [Front-Wheel Drive, 4-Wheel or All-Wheel Drive... 1989 [Rear-Wheel Drive, 4-Wheel or All-Wheel Drive,... 1990 [Front-Wheel Drive, Rear-Wheel Drive, 4-Wheel ... 1991 [Rear-Wheel Drive, 4-Wheel or All-Wheel Drive,... 1992 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 1993 [4-Wheel or All-Wheel Drive, Front-Wheel Drive... 1994 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 1995 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 1996 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 1997 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 1998 [Rear-Wheel Drive, 4-Wheel or All-Wheel Drive,... 1999 [Rear-Wheel Drive, 4-Wheel or All-Wheel Drive,... 2000 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 2001 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 2002 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 2003 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 2004 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 2005 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 2006 [Front-Wheel Drive, 4-Wheel or All-Wheel Drive... 2007 [4-Wheel or All-Wheel Drive, Rear-Wheel Drive,... 2008 [Front-Wheel Drive, 4-Wheel or All-Wheel Drive... 2009 [Rear-Wheel Drive, 4-Wheel or All-Wheel Drive,... 2010 [Rear-Wheel Drive, All-Wheel Drive, 4-Wheel Dr... 2011 [Rear-Wheel Drive, Front-Wheel Drive, All-Whee... 2012 [All-Wheel Drive, Rear-Wheel Drive, Front-Whee... 2013 [All-Wheel Drive, Front-Wheel Drive, Rear-Whee... 2014 [Front-Wheel Drive, 4-Wheel Drive, Rear-Wheel ... 2015 [All-Wheel Drive, Front-Wheel Drive, Rear-Whee... 2016 [Front-Wheel Drive, All-Wheel Drive, 4-Wheel D... 2017 [Front-Wheel Drive, All-Wheel Drive, Rear-Whee... 2018 [Front-Wheel Drive, All-Wheel Drive, Rear-Whee... 2019 [Front-Wheel Drive, All-Wheel Drive, 4-Wheel D... 2020 [Front-Wheel Drive, All-Wheel Drive, 4-Wheel D... Name: drive, dtype: object . (autos [cols].groupby(&#39;year&#39;) .drive .nunique()) . year 1984 3 1985 4 1986 4 1987 3 1988 3 1989 3 1990 3 1991 3 1992 3 1993 3 1994 3 1995 4 1996 3 1997 4 1998 4 1999 4 2000 4 2001 4 2002 4 2003 4 2004 4 2005 4 2006 4 2007 4 2008 3 2009 4 2010 6 2011 5 2012 5 2013 5 2014 5 2015 5 2016 5 2017 5 2018 5 2019 5 2020 5 Name: drive, dtype: int64 . (autos [cols].groupby(&#39;year&#39;) .drive .unique()) # can be better written . year 1984 [nan, 2-Wheel Drive, Rear-Wheel Drive, 4-Wheel... 1985 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 1986 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 1987 [Rear-Wheel Drive, 4-Wheel or All-Wheel Drive,... 1988 [Front-Wheel Drive, 4-Wheel or All-Wheel Drive... 1989 [Rear-Wheel Drive, 4-Wheel or All-Wheel Drive,... 1990 [Front-Wheel Drive, Rear-Wheel Drive, 4-Wheel ... 1991 [Rear-Wheel Drive, 4-Wheel or All-Wheel Drive,... 1992 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 1993 [4-Wheel or All-Wheel Drive, Front-Wheel Drive... 1994 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 1995 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 1996 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 1997 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 1998 [Rear-Wheel Drive, 4-Wheel or All-Wheel Drive,... 1999 [Rear-Wheel Drive, 4-Wheel or All-Wheel Drive,... 2000 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 2001 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 2002 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 2003 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 2004 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 2005 [Rear-Wheel Drive, Front-Wheel Drive, 4-Wheel ... 2006 [Front-Wheel Drive, 4-Wheel or All-Wheel Drive... 2007 [4-Wheel or All-Wheel Drive, Rear-Wheel Drive,... 2008 [Front-Wheel Drive, 4-Wheel or All-Wheel Drive... 2009 [Rear-Wheel Drive, 4-Wheel or All-Wheel Drive,... 2010 [Rear-Wheel Drive, All-Wheel Drive, 4-Wheel Dr... 2011 [Rear-Wheel Drive, Front-Wheel Drive, All-Whee... 2012 [All-Wheel Drive, Rear-Wheel Drive, Front-Whee... 2013 [All-Wheel Drive, Front-Wheel Drive, Rear-Whee... 2014 [Front-Wheel Drive, 4-Wheel Drive, Rear-Wheel ... 2015 [All-Wheel Drive, Front-Wheel Drive, Rear-Whee... 2016 [Front-Wheel Drive, All-Wheel Drive, 4-Wheel D... 2017 [Front-Wheel Drive, All-Wheel Drive, Rear-Whee... 2018 [Front-Wheel Drive, All-Wheel Drive, Rear-Whee... 2019 [Front-Wheel Drive, All-Wheel Drive, 4-Wheel D... 2020 [Front-Wheel Drive, All-Wheel Drive, 4-Wheel D... Name: drive, dtype: object . (autos [cols].groupby(&#39;year&#39;) .drive .nunique() .sum()) . 149 . Can we decrese our memory usage even more? . (autos [cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;), drive = autos.drive.fillna(&#39;Other&#39;).astype(&#39;category&#39;) #let&#39;s change drive to categorical #this should decrease our memory usage ) .astype({&#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;:&#39;int16&#39;, &#39;make&#39;:&#39;category&#39;}) .memory_usage(deep=True) .sum() ) # was 19,647,323 bytes at the start . 12093275 . Check if transmission types has NaNs . autos.trany.value_counts(dropna=False) #Let us check if transmission types has NaNs . Automatic 4-spd 11047 Manual 5-spd 8361 Automatic 3-spd 3151 Automatic (S6) 3106 Manual 6-spd 2757 Automatic 5-spd 2203 Automatic (S8) 1665 Automatic 6-spd 1619 Manual 4-spd 1483 Automatic (S5) 833 Automatic (variable gear ratios) 826 Automatic 7-spd 724 Automatic 8-spd 433 Automatic (AM-S7) 424 Automatic (S7) 327 Automatic 9-spd 293 Automatic (AM7) 245 Automatic (S4) 233 Automatic (AV-S6) 208 Automatic (A1) 201 Automatic (AM6) 151 Automatic (AV-S7) 139 Automatic (S10) 124 Automatic (AM-S6) 116 Manual 7-spd 114 Automatic (S9) 86 Manual 3-spd 77 Automatic (AM-S8) 60 Automatic (AV-S8) 47 Automatic 10-spd 25 Manual 4-spd Doubled 17 Automatic (AM5) 14 NaN 11 Automatic (AV-S10) 11 Automatic (AM8) 6 Automatic (AM-S9) 3 Automatic (L3) 2 Automatic (L4) 2 Name: trany, dtype: int64 . Assign is important . To prevent mutation, especially now that we have filtered/modified parts of the dataset. . &quot;The Pandas assign method enables us to add new columns to a dataframe. We provide the input dataframe, tell assign how to calculate the new column, and it creates a NEW dataframe with the additional new column.&quot; . (autos [cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;), drive = autos.drive.fillna(&#39;Other&#39;).astype(&#39;category&#39;), automatic = autos.trany.str.contains(&#39;Auto&#39;), speeds=autos.trany.str.extract(r&#39;( d)+&#39;).fillna(&#39;20&#39;).astype(&#39;int8&#39;) ) .astype({&#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;:&#39;int16&#39;, &#39;make&#39;:&#39;category&#39;}) .drop(columns=[&#39;trany&#39;]) .memory_usage(deep=True) .sum() ) . 10631047 . we can assign to a new variable if we want... . autos_df2 = (autos [cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;), drive = autos.drive.fillna(&#39;Other&#39;).astype(&#39;category&#39;), automatic = autos.trany.str.contains(&#39;Auto&#39;), speeds=autos.trany.str.extract(r&#39;( d)+&#39;).fillna(&#39;20&#39;).astype(&#39;int8&#39;) ) .astype({&#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;:&#39;int16&#39;, &#39;make&#39;:&#39;category&#39;}) .drop(columns=[&#39;trany&#39;])) . autos_df2.speeds.unique() . array([ 5, 3, 4, 6, 20, 7, 8, 1, 9, 0], dtype=int8) . autos_df2.query(&#39;speeds ==20&#39;).sample(5) . city08 comb08 highway08 cylinders displ drive eng_dscr fuelCost08 make model range createdOn year automatic speeds . 33925 31 | 35 | 40 | 4 | 1.500000 | Front-Wheel Drive | SIDI | 1200 | Honda | Civic 2Dr | 0 | Wed Oct 03 00:00:00 EDT 2018 | 2019 | True | 20 | . 26143 30 | 33 | 37 | 4 | 1.200195 | Front-Wheel Drive | NaN | 1300 | Chevrolet | Spark | 0 | Tue Jan 01 00:00:00 EST 2013 | 2014 | True | 20 | . 24136 20 | 21 | 23 | 4 | 2.400391 | 4-Wheel Drive | Off Road Package | 2000 | Jeep | Patriot 4WD | 0 | Tue Jan 01 00:00:00 EST 2013 | 2012 | True | 20 | . 25352 22 | 25 | 29 | 4 | 2.400391 | All-Wheel Drive | NaN | 1700 | Suzuki | Kizashi AWD | 0 | Tue Jan 01 00:00:00 EST 2013 | 2013 | True | 20 | . 26934 22 | 24 | 26 | 4 | 2.000000 | Front-Wheel Drive | NaN | 1750 | Jeep | Patriot FWD | 0 | Tue Jan 01 00:00:00 EST 2013 | 2014 | True | 20 | . Dates . Changing a time-zone . (autos [cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;), drive = autos.drive.fillna(&#39;Other&#39;).astype(&#39;category&#39;), automatic = autos.trany.str.contains(&#39;Auto&#39;), speeds=autos.trany.str.extract(r&#39;( d)+&#39;).fillna(&#39;20&#39;).astype(&#39;int8&#39;), createdOn=pd.to_datetime(autos.createdOn).dt.tz_localize(&#39;America/New_York&#39;)#(&#39;Australia/Sydney&#39;) #change time-zone ) .astype({&#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;:&#39;int16&#39;, &#39;make&#39;:&#39;category&#39;}) .drop(columns=[&#39;trany&#39;])) . /Users/ficus/opt/anaconda3/envs/ml-starter/lib/python3.9/site-packages/dateutil/parser/_parser.py:1207: UnknownTimezoneWarning: tzname EST identified but not understood. Pass `tzinfos` argument in order to correctly return a timezone-aware datetime. In a future version, this will raise an exception. warnings.warn(&#34;tzname {tzname} identified but not understood. &#34; /Users/ficus/opt/anaconda3/envs/ml-starter/lib/python3.9/site-packages/dateutil/parser/_parser.py:1207: UnknownTimezoneWarning: tzname EDT identified but not understood. Pass `tzinfos` argument in order to correctly return a timezone-aware datetime. In a future version, this will raise an exception. warnings.warn(&#34;tzname {tzname} identified but not understood. &#34; . city08 comb08 highway08 cylinders displ drive eng_dscr fuelCost08 make model range createdOn year automatic speeds . 0 19 | 21 | 25 | 4 | 2.000000 | Rear-Wheel Drive | (FFS) | 2000 | Alfa Romeo | Spider Veloce 2000 | 0 | 2013-01-01 00:00:00-05:00 | 1985 | False | 5 | . 1 9 | 11 | 14 | 12 | 4.898438 | Rear-Wheel Drive | (GUZZLER) | 3850 | Ferrari | Testarossa | 0 | 2013-01-01 00:00:00-05:00 | 1985 | False | 5 | . 2 23 | 27 | 33 | 4 | 2.199219 | Front-Wheel Drive | (FFS) | 1550 | Dodge | Charger | 0 | 2013-01-01 00:00:00-05:00 | 1985 | False | 5 | . 3 10 | 11 | 12 | 8 | 5.199219 | Rear-Wheel Drive | NaN | 3850 | Dodge | B150/B250 Wagon 2WD | 0 | 2013-01-01 00:00:00-05:00 | 1985 | True | 3 | . 4 17 | 19 | 23 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | (FFS,TRBO) | 2700 | Subaru | Legacy AWD Turbo | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | . 5 21 | 22 | 24 | 4 | 1.799805 | Front-Wheel Drive | (FFS) | 1900 | Subaru | Loyale | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 3 | . 6 22 | 25 | 29 | 4 | 1.799805 | Front-Wheel Drive | (FFS) | 1700 | Subaru | Loyale | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | . 7 23 | 24 | 26 | 4 | 1.599609 | Front-Wheel Drive | (FFS) | 1750 | Toyota | Corolla | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 3 | . 8 23 | 26 | 31 | 4 | 1.599609 | Front-Wheel Drive | (FFS) | 1600 | Toyota | Corolla | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | . 9 23 | 25 | 30 | 4 | 1.799805 | Front-Wheel Drive | (FFS) | 1700 | Toyota | Corolla | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 41134 18 | 20 | 24 | 4 | 2.099609 | Front-Wheel Drive | (FFS) | 2100 | Saab | 900 | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | . 41135 23 | 26 | 33 | 4 | 1.900391 | Front-Wheel Drive | (TBI) (FFS) | 1600 | Saturn | SL | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | . 41136 21 | 24 | 30 | 4 | 1.900391 | Front-Wheel Drive | (MFI) (FFS) | 1750 | Saturn | SL | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | . 41137 24 | 28 | 33 | 4 | 1.900391 | Front-Wheel Drive | (TBI) (FFS) | 1500 | Saturn | SL | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | . 41138 21 | 25 | 32 | 4 | 1.900391 | Front-Wheel Drive | (MFI) (FFS) | 1700 | Saturn | SL | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | . 41139 19 | 22 | 26 | 4 | 2.199219 | Front-Wheel Drive | (FFS) | 1900 | Subaru | Legacy | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | . 41140 20 | 23 | 28 | 4 | 2.199219 | Front-Wheel Drive | (FFS) | 1850 | Subaru | Legacy | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | . 41141 18 | 21 | 24 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | (FFS) | 2000 | Subaru | Legacy AWD | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | . 41142 18 | 21 | 24 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | (FFS) | 2000 | Subaru | Legacy AWD | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | . 41143 16 | 18 | 21 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | (FFS,TRBO) | 2900 | Subaru | Legacy AWD Turbo | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | . 41144 rows × 15 columns . (autos [cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;), drive = autos.drive.fillna(&#39;Other&#39;).astype(&#39;category&#39;), automatic = autos.trany.str.contains(&#39;Auto&#39;), speeds=autos.trany.str.extract(r&#39;( d)+&#39;).fillna(&#39;20&#39;).astype(&#39;int8&#39;), createdOn=pd.to_datetime(autos.createdOn.replace({&#39; EDT&#39;: &#39;-04:00&#39;, &#39; EST&#39;: &#39;-05:00&#39;}, regex=True)) ) .astype({&#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;:&#39;int16&#39;, &#39;make&#39;:&#39;category&#39;}) .drop(columns=[&#39;trany&#39;]) .eng_dscr .value_counts(dropna = False) ) . NaN 16153 (FFS) 8827 SIDI 5526 (FFS) CA model 926 (FFS) (MPFI) 734 FFV 701 (FFS,TRBO) 666 (350 V8) (FFS) 411 (GUZZLER) (FFS) 366 SOHC 354 ... B234L/R4 (FFS,TRBO) 1 GUZZLER V8 FFS,TURBO 1 4.6M FFS MPFI 1 CNG FFS 1 POLICE FFS MPFI 1 B308E5 FFS,TURBO 1 5.4E-R FFS MPFI 1 V-6 FFS 1 (GUZZLER) (FFS) (S-CHARGE) 1 R-ENG (FFS,TRBO) 1 Name: eng_dscr, Length: 558, dtype: int64 . (autos [cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;), drive = autos.drive.fillna(&#39;Other&#39;).astype(&#39;category&#39;), automatic = autos.trany.str.contains(&#39;Auto&#39;), speeds=autos.trany.str.extract(r&#39;( d)+&#39;).fillna(&#39;20&#39;).astype(&#39;int8&#39;), createdOn=pd.to_datetime(autos.createdOn.replace({&#39; EDT&#39;: &#39;-04:00&#39;, &#39; EST&#39;: &#39;-05:00&#39;}, regex=True)), ffs=autos.eng_dscr.str.contains(&#39;FFS&#39;) #feedback-fuel system ) .astype({&#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;:&#39;int16&#39;, &#39;make&#39;:&#39;category&#39;}) .drop(columns=[&#39;trany&#39;]) ) . city08 comb08 highway08 cylinders displ drive eng_dscr fuelCost08 make model range createdOn year automatic speeds ffs . 0 19 | 21 | 25 | 4 | 2.000000 | Rear-Wheel Drive | (FFS) | 2000 | Alfa Romeo | Spider Veloce 2000 | 0 | 2013-01-01 00:00:00-05:00 | 1985 | False | 5 | True | . 1 9 | 11 | 14 | 12 | 4.898438 | Rear-Wheel Drive | (GUZZLER) | 3850 | Ferrari | Testarossa | 0 | 2013-01-01 00:00:00-05:00 | 1985 | False | 5 | False | . 2 23 | 27 | 33 | 4 | 2.199219 | Front-Wheel Drive | (FFS) | 1550 | Dodge | Charger | 0 | 2013-01-01 00:00:00-05:00 | 1985 | False | 5 | True | . 3 10 | 11 | 12 | 8 | 5.199219 | Rear-Wheel Drive | NaN | 3850 | Dodge | B150/B250 Wagon 2WD | 0 | 2013-01-01 00:00:00-05:00 | 1985 | True | 3 | NaN | . 4 17 | 19 | 23 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | (FFS,TRBO) | 2700 | Subaru | Legacy AWD Turbo | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | . 5 21 | 22 | 24 | 4 | 1.799805 | Front-Wheel Drive | (FFS) | 1900 | Subaru | Loyale | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 3 | True | . 6 22 | 25 | 29 | 4 | 1.799805 | Front-Wheel Drive | (FFS) | 1700 | Subaru | Loyale | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | . 7 23 | 24 | 26 | 4 | 1.599609 | Front-Wheel Drive | (FFS) | 1750 | Toyota | Corolla | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 3 | True | . 8 23 | 26 | 31 | 4 | 1.599609 | Front-Wheel Drive | (FFS) | 1600 | Toyota | Corolla | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | . 9 23 | 25 | 30 | 4 | 1.799805 | Front-Wheel Drive | (FFS) | 1700 | Toyota | Corolla | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 41134 18 | 20 | 24 | 4 | 2.099609 | Front-Wheel Drive | (FFS) | 2100 | Saab | 900 | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | . 41135 23 | 26 | 33 | 4 | 1.900391 | Front-Wheel Drive | (TBI) (FFS) | 1600 | Saturn | SL | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | . 41136 21 | 24 | 30 | 4 | 1.900391 | Front-Wheel Drive | (MFI) (FFS) | 1750 | Saturn | SL | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | . 41137 24 | 28 | 33 | 4 | 1.900391 | Front-Wheel Drive | (TBI) (FFS) | 1500 | Saturn | SL | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | . 41138 21 | 25 | 32 | 4 | 1.900391 | Front-Wheel Drive | (MFI) (FFS) | 1700 | Saturn | SL | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | . 41139 19 | 22 | 26 | 4 | 2.199219 | Front-Wheel Drive | (FFS) | 1900 | Subaru | Legacy | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | . 41140 20 | 23 | 28 | 4 | 2.199219 | Front-Wheel Drive | (FFS) | 1850 | Subaru | Legacy | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | . 41141 18 | 21 | 24 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | (FFS) | 2000 | Subaru | Legacy AWD | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | . 41142 18 | 21 | 24 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | (FFS) | 2000 | Subaru | Legacy AWD | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | . 41143 16 | 18 | 21 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | (FFS,TRBO) | 2900 | Subaru | Legacy AWD Turbo | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | . 41144 rows × 16 columns . (autos [cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;), drive = autos.drive.fillna(&#39;Other&#39;).astype(&#39;category&#39;), automatic = autos.trany.str.contains(&#39;Auto&#39;), speeds=autos.trany.str.extract(r&#39;( d)+&#39;).fillna(&#39;20&#39;).astype(&#39;int8&#39;), createdOn=pd.to_datetime(autos.createdOn.replace({&#39; EDT&#39;: &#39;-04:00&#39;, &#39; EST&#39;: &#39;-05:00&#39;}, regex=True)), ffs=autos.eng_dscr.str.contains(&#39;FFS&#39;) #feedback-fuel system ) .astype({&#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;:&#39;int16&#39;, &#39;make&#39;:&#39;category&#39;}) .drop(columns=[&#39;trany&#39;, &#39;eng_dscr&#39;]) .memory_usage(deep=True) .sum() ) . 8676214 . Let&#39;s put everything into a function! . Chaining is also called &quot;flow&quot; programming. Rather tahn making intermediate variables, just leverage the fact that most operations return a new object and work on that. . The chain should read like a recipe of ordered steps. Pretty much what we&#39;ve been doing above and in the next cell below. . Leverage pipe, whenever you can&#39;t get to an endpoint with a chain: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.pipe.html . def tweak_autos(autos): cols = [&#39;city08&#39;, &#39;comb08&#39;, &#39;highway08&#39;, &#39;cylinders&#39;, &#39;displ&#39;, &#39;drive&#39;,&#39;eng_dscr&#39;, &#39;fuelCost08&#39;,&#39;make&#39;, &#39;model&#39;, &#39;trany&#39;, &#39;range&#39;, &#39;createdOn&#39;, &#39;year&#39;] return (autos [cols] .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;), drive = autos.drive.fillna(&#39;Other&#39;).astype(&#39;category&#39;), automatic = autos.trany.str.contains(&#39;Auto&#39;), speeds=autos.trany.str.extract(r&#39;( d)+&#39;).fillna(&#39;20&#39;).astype(&#39;int8&#39;), createdOn=pd.to_datetime(autos.createdOn.replace({&#39; EDT&#39;: &#39;-04:00&#39;, &#39; EST&#39;: &#39;-05:00&#39;}, regex=True)), ffs=autos.eng_dscr.str.contains(&#39;FFS&#39;) #feedback-fuel system ) .astype({&#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;:&#39;int16&#39;, &#39;make&#39;:&#39;category&#39;}) .drop(columns=[&#39;trany&#39;, &#39;eng_dscr&#39;]) ) . tweak_autos(autos).head(5) . city08 comb08 highway08 cylinders displ drive fuelCost08 make model range createdOn year automatic speeds ffs . 0 19 | 21 | 25 | 4 | 2.000000 | Rear-Wheel Drive | 2000 | Alfa Romeo | Spider Veloce 2000 | 0 | 2013-01-01 00:00:00-05:00 | 1985 | False | 5 | True | . 1 9 | 11 | 14 | 12 | 4.898438 | Rear-Wheel Drive | 3850 | Ferrari | Testarossa | 0 | 2013-01-01 00:00:00-05:00 | 1985 | False | 5 | False | . 2 23 | 27 | 33 | 4 | 2.199219 | Front-Wheel Drive | 1550 | Dodge | Charger | 0 | 2013-01-01 00:00:00-05:00 | 1985 | False | 5 | True | . 3 10 | 11 | 12 | 8 | 5.199219 | Rear-Wheel Drive | 3850 | Dodge | B150/B250 Wagon 2WD | 0 | 2013-01-01 00:00:00-05:00 | 1985 | True | 3 | NaN | . 4 17 | 19 | 23 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | 2700 | Subaru | Legacy AWD Turbo | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | . Debugging and the power of chaining . # - assign to var (df3) # - comment out # - pipe to display from IPython.display import display def get_var(df, var_name): &#39;&#39;&#39;create global key with var_name and assign df object --&gt; returns DataFrame into globals namespace &#39;&#39;&#39; globals()[var_name] = df return df def tweak_autos(autos): cols = [&#39;city08&#39;, &#39;comb08&#39;, &#39;highway08&#39;, &#39;cylinders&#39;, &#39;displ&#39;, &#39;drive&#39;,&#39;eng_dscr&#39;, &#39;fuelCost08&#39;,&#39;make&#39;, &#39;model&#39;, &#39;trany&#39;, &#39;range&#39;, &#39;createdOn&#39;, &#39;year&#39;] return (autos [cols] # create var .pipe(get_var,&#39;df3&#39;) .assign(cylinders=autos.cylinders.fillna(0).astype(&#39;int8&#39;), displ=autos.displ.fillna(0).astype(&#39;float16&#39;), drive = autos.drive.fillna(&#39;Other&#39;).astype(&#39;category&#39;), automatic = autos.trany.str.contains(&#39;Auto&#39;), speeds=autos.trany.str.extract(r&#39;( d)+&#39;).fillna(&#39;20&#39;).astype(&#39;int8&#39;), createdOn=pd.to_datetime(autos.createdOn.replace({&#39; EDT&#39;: &#39;-04:00&#39;, &#39; EST&#39;: &#39;-05:00&#39;}, regex=True)), ffs=autos.eng_dscr.str.contains(&#39;FFS&#39;) #feedback-fuel system ) #debug pipe .pipe(lambda df: display(df) or df) #this is like a breakpoint .astype({&#39;highway08&#39;: &#39;int8&#39;, &#39;city08&#39;: &#39;int16&#39;, &#39;comb08&#39;: &#39;int16&#39;, &#39;fuelCost08&#39;: &#39;int16&#39;, &#39;range&#39;: &#39;int16&#39;, &#39;year&#39;:&#39;int16&#39;, &#39;make&#39;:&#39;category&#39;}) .drop(columns=[&#39;trany&#39;, &#39;eng_dscr&#39;]) ) autos2 = tweak_autos(autos) . city08 comb08 highway08 cylinders displ drive eng_dscr fuelCost08 make model trany range createdOn year automatic speeds ffs . 0 19 | 21 | 25 | 4 | 2.000000 | Rear-Wheel Drive | (FFS) | 2000 | Alfa Romeo | Spider Veloce 2000 | Manual 5-spd | 0 | 2013-01-01 00:00:00-05:00 | 1985 | False | 5 | True | . 1 9 | 11 | 14 | 12 | 4.898438 | Rear-Wheel Drive | (GUZZLER) | 3850 | Ferrari | Testarossa | Manual 5-spd | 0 | 2013-01-01 00:00:00-05:00 | 1985 | False | 5 | False | . 2 23 | 27 | 33 | 4 | 2.199219 | Front-Wheel Drive | (FFS) | 1550 | Dodge | Charger | Manual 5-spd | 0 | 2013-01-01 00:00:00-05:00 | 1985 | False | 5 | True | . 3 10 | 11 | 12 | 8 | 5.199219 | Rear-Wheel Drive | NaN | 3850 | Dodge | B150/B250 Wagon 2WD | Automatic 3-spd | 0 | 2013-01-01 00:00:00-05:00 | 1985 | True | 3 | NaN | . 4 17 | 19 | 23 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | (FFS,TRBO) | 2700 | Subaru | Legacy AWD Turbo | Manual 5-spd | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | . 5 21 | 22 | 24 | 4 | 1.799805 | Front-Wheel Drive | (FFS) | 1900 | Subaru | Loyale | Automatic 3-spd | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 3 | True | . 6 22 | 25 | 29 | 4 | 1.799805 | Front-Wheel Drive | (FFS) | 1700 | Subaru | Loyale | Manual 5-spd | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | . 7 23 | 24 | 26 | 4 | 1.599609 | Front-Wheel Drive | (FFS) | 1750 | Toyota | Corolla | Automatic 3-spd | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 3 | True | . 8 23 | 26 | 31 | 4 | 1.599609 | Front-Wheel Drive | (FFS) | 1600 | Toyota | Corolla | Manual 5-spd | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | . 9 23 | 25 | 30 | 4 | 1.799805 | Front-Wheel Drive | (FFS) | 1700 | Toyota | Corolla | Automatic 4-spd | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 41134 18 | 20 | 24 | 4 | 2.099609 | Front-Wheel Drive | (FFS) | 2100 | Saab | 900 | Manual 5-spd | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | . 41135 23 | 26 | 33 | 4 | 1.900391 | Front-Wheel Drive | (TBI) (FFS) | 1600 | Saturn | SL | Automatic 4-spd | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | . 41136 21 | 24 | 30 | 4 | 1.900391 | Front-Wheel Drive | (MFI) (FFS) | 1750 | Saturn | SL | Automatic 4-spd | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | . 41137 24 | 28 | 33 | 4 | 1.900391 | Front-Wheel Drive | (TBI) (FFS) | 1500 | Saturn | SL | Manual 5-spd | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | . 41138 21 | 25 | 32 | 4 | 1.900391 | Front-Wheel Drive | (MFI) (FFS) | 1700 | Saturn | SL | Manual 5-spd | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | . 41139 19 | 22 | 26 | 4 | 2.199219 | Front-Wheel Drive | (FFS) | 1900 | Subaru | Legacy | Automatic 4-spd | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | . 41140 20 | 23 | 28 | 4 | 2.199219 | Front-Wheel Drive | (FFS) | 1850 | Subaru | Legacy | Manual 5-spd | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | . 41141 18 | 21 | 24 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | (FFS) | 2000 | Subaru | Legacy AWD | Automatic 4-spd | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | . 41142 18 | 21 | 24 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | (FFS) | 2000 | Subaru | Legacy AWD | Manual 5-spd | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | . 41143 16 | 18 | 21 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | (FFS,TRBO) | 2900 | Subaru | Legacy AWD Turbo | Automatic 4-spd | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | . 41144 rows × 17 columns . df3.head(5) . city08 comb08 highway08 cylinders displ drive eng_dscr fuelCost08 make model trany range createdOn year . 0 19 | 21 | 25 | 4.0 | 2.0 | Rear-Wheel Drive | (FFS) | 2000 | Alfa Romeo | Spider Veloce 2000 | Manual 5-spd | 0 | Tue Jan 01 00:00:00 EST 2013 | 1985 | . 1 9 | 11 | 14 | 12.0 | 4.9 | Rear-Wheel Drive | (GUZZLER) | 3850 | Ferrari | Testarossa | Manual 5-spd | 0 | Tue Jan 01 00:00:00 EST 2013 | 1985 | . 2 23 | 27 | 33 | 4.0 | 2.2 | Front-Wheel Drive | (FFS) | 1550 | Dodge | Charger | Manual 5-spd | 0 | Tue Jan 01 00:00:00 EST 2013 | 1985 | . 3 10 | 11 | 12 | 8.0 | 5.2 | Rear-Wheel Drive | NaN | 3850 | Dodge | B150/B250 Wagon 2WD | Automatic 3-spd | 0 | Tue Jan 01 00:00:00 EST 2013 | 1985 | . 4 17 | 19 | 23 | 4.0 | 2.2 | 4-Wheel or All-Wheel Drive | (FFS,TRBO) | 2700 | Subaru | Legacy AWD Turbo | Manual 5-spd | 0 | Tue Jan 01 00:00:00 EST 2013 | 1993 | . Don&#39;t Mutate . &quot;you are missing the point, inplace rarel actually does something inplace, you are thinking that you are saving memory but you are not&quot; . jreback - Pandas core dev . https://github.com/pandas-dev/pandas/issues/16529#issuecomment-676518136 . in general no performance benefits | Prohibits chaining | SettingWithCopyWarning | . Don&#39;t Apply (if you can) . Generally, categorical can speed things up, but this needs to be tested across machines. . If using numerical avoid apply | If using strings some operations like isin may be faster than apply. | Avoid using where with strings since it will be slower than apply. where works better with numbers. | Avoid for loops -- use where and np.select to avoid using for loops. | . %%timeit #Don&#39;t do this, as it will look into each entry of the DataFrame and apply conversion to each one at at time. #This will be slow. def to_lper100km(val): return 235.215/val autos2.city08.apply(to_lper100km) . 5.14 ms ± 90.9 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . %%timeit # same results but not as quickly 235.215/autos2.city08 . 60.2 µs ± 1.11 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each) . def is_american(val): return val in {&#39;Chevrolet&#39;, &#39;Ford&#39;, &#39;Dodge&#39;, &#39;GMC&#39;, &#39;Tesla&#39;} . %%timeit autos2.make.apply(is_american) . 801 µs ± 25.1 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) . %%timeit autos2.make.isin({&#39;Chevrolet&#39;, &#39;Ford&#39;, &#39;Dodge&#39;, &#39;GMC&#39;, &#39;Tesla&#39;}) . 486 µs ± 13.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) . %%timeit # string timings autos2.make.astype(str).isin({&#39;Chevrolet&#39;, &#39;Ford&#39;, &#39;Dodge&#39;, &#39;GMC&#39;, &#39;Tesla&#39;}) #used to be categorical -- we did this before. . 5.83 ms ± 241 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . %%timeit autos2.make.astype(str).apply(is_american) . 8.38 ms ± 47.7 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . def country(val): if val in {&#39;Chevrolet&#39;, &#39;Ford&#39;, &#39;Dodge&#39;, &#39;GMC&#39;, &#39;Tesla&#39;}: return &#39;US&#39; return &#39;Other&#39; . %%timeit # Apply might be ok for strings, since they are not vectorized... (autos2.assign(country=autos2.make.apply(country)) #returns a string ) . 1.9 ms ± 4.2 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) . %%timeit #In general the `where` method works better with digits/numbers #In this case, using `where` even without `apply` is slower since we&#39;re working with strings values = {&#39;Chevrolet&#39;, &#39;Ford&#39;, &#39;Dodge&#39;, &#39;GMC&#39;, &#39;Tesla&#39;} (autos2 .assign(country=&#39;US&#39;) #doesn&#39;t use apply as before and uses where. .assign(country=lambda df_:df_.country.where(df_.make.isin(values), &#39;Other&#39;)) ) . 5.33 ms ± 159 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . # .assign(country=np.select([autos2.make.isin({&#39;Chevrolet&#39;, &#39;Ford&#39;, &#39;Dodge&#39;, &#39;GMC&#39;, &#39;Tesla&#39;})],[&#39;US&#39;], &#39;Other&#39;)) #returns a list to the dataframe # ) values2 = &#39;Chevrolet&#39;, &#39;Ford&#39;, &#39;Dodge&#39;, &#39;GMC&#39;, &#39;Tesla&#39; (autos2 .assign(country=np.select([autos2.make.isin(values2)],[&#39;US&#39;], &#39;Other&#39;)) #returns a list to the dataframe ) . city08 comb08 highway08 cylinders displ drive fuelCost08 make model range createdOn year automatic speeds ffs country . 0 19 | 21 | 25 | 4 | 2.000000 | Rear-Wheel Drive | 2000 | Alfa Romeo | Spider Veloce 2000 | 0 | 2013-01-01 00:00:00-05:00 | 1985 | False | 5 | True | Other | . 1 9 | 11 | 14 | 12 | 4.898438 | Rear-Wheel Drive | 3850 | Ferrari | Testarossa | 0 | 2013-01-01 00:00:00-05:00 | 1985 | False | 5 | False | Other | . 2 23 | 27 | 33 | 4 | 2.199219 | Front-Wheel Drive | 1550 | Dodge | Charger | 0 | 2013-01-01 00:00:00-05:00 | 1985 | False | 5 | True | US | . 3 10 | 11 | 12 | 8 | 5.199219 | Rear-Wheel Drive | 3850 | Dodge | B150/B250 Wagon 2WD | 0 | 2013-01-01 00:00:00-05:00 | 1985 | True | 3 | NaN | US | . 4 17 | 19 | 23 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | 2700 | Subaru | Legacy AWD Turbo | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | Other | . 5 21 | 22 | 24 | 4 | 1.799805 | Front-Wheel Drive | 1900 | Subaru | Loyale | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 3 | True | Other | . 6 22 | 25 | 29 | 4 | 1.799805 | Front-Wheel Drive | 1700 | Subaru | Loyale | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | Other | . 7 23 | 24 | 26 | 4 | 1.599609 | Front-Wheel Drive | 1750 | Toyota | Corolla | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 3 | True | Other | . 8 23 | 26 | 31 | 4 | 1.599609 | Front-Wheel Drive | 1600 | Toyota | Corolla | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | Other | . 9 23 | 25 | 30 | 4 | 1.799805 | Front-Wheel Drive | 1700 | Toyota | Corolla | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | Other | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 41134 18 | 20 | 24 | 4 | 2.099609 | Front-Wheel Drive | 2100 | Saab | 900 | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | Other | . 41135 23 | 26 | 33 | 4 | 1.900391 | Front-Wheel Drive | 1600 | Saturn | SL | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | Other | . 41136 21 | 24 | 30 | 4 | 1.900391 | Front-Wheel Drive | 1750 | Saturn | SL | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | Other | . 41137 24 | 28 | 33 | 4 | 1.900391 | Front-Wheel Drive | 1500 | Saturn | SL | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | Other | . 41138 21 | 25 | 32 | 4 | 1.900391 | Front-Wheel Drive | 1700 | Saturn | SL | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | Other | . 41139 19 | 22 | 26 | 4 | 2.199219 | Front-Wheel Drive | 1900 | Subaru | Legacy | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | Other | . 41140 20 | 23 | 28 | 4 | 2.199219 | Front-Wheel Drive | 1850 | Subaru | Legacy | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | Other | . 41141 18 | 21 | 24 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | 2000 | Subaru | Legacy AWD | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | Other | . 41142 18 | 21 | 24 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | 2000 | Subaru | Legacy AWD | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | Other | . 41143 16 | 18 | 21 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | 2900 | Subaru | Legacy AWD Turbo | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | Other | . 41144 rows × 16 columns . [autos2.make.isin(values2)],[&#39;US&#39;], &#39;Other&#39; . ([0 False 1 False 2 True 3 True 4 False 5 False 6 False 7 False 8 False 9 False ... 41134 False 41135 False 41136 False 41137 False 41138 False 41139 False 41140 False 41141 False 41142 False 41143 False Name: make, Length: 41144, dtype: bool], [&#39;US&#39;], &#39;Other&#39;) . (autos2 .assign(country=np.where(autos2.make.isin(values2),&#39;US&#39;, &#39;Other&#39;)) #returns a list to the dataframe ) . city08 comb08 highway08 cylinders displ drive fuelCost08 make model range createdOn year automatic speeds ffs country . 0 19 | 21 | 25 | 4 | 2.000000 | Rear-Wheel Drive | 2000 | Alfa Romeo | Spider Veloce 2000 | 0 | 2013-01-01 00:00:00-05:00 | 1985 | False | 5 | True | Other | . 1 9 | 11 | 14 | 12 | 4.898438 | Rear-Wheel Drive | 3850 | Ferrari | Testarossa | 0 | 2013-01-01 00:00:00-05:00 | 1985 | False | 5 | False | Other | . 2 23 | 27 | 33 | 4 | 2.199219 | Front-Wheel Drive | 1550 | Dodge | Charger | 0 | 2013-01-01 00:00:00-05:00 | 1985 | False | 5 | True | US | . 3 10 | 11 | 12 | 8 | 5.199219 | Rear-Wheel Drive | 3850 | Dodge | B150/B250 Wagon 2WD | 0 | 2013-01-01 00:00:00-05:00 | 1985 | True | 3 | NaN | US | . 4 17 | 19 | 23 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | 2700 | Subaru | Legacy AWD Turbo | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | Other | . 5 21 | 22 | 24 | 4 | 1.799805 | Front-Wheel Drive | 1900 | Subaru | Loyale | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 3 | True | Other | . 6 22 | 25 | 29 | 4 | 1.799805 | Front-Wheel Drive | 1700 | Subaru | Loyale | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | Other | . 7 23 | 24 | 26 | 4 | 1.599609 | Front-Wheel Drive | 1750 | Toyota | Corolla | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 3 | True | Other | . 8 23 | 26 | 31 | 4 | 1.599609 | Front-Wheel Drive | 1600 | Toyota | Corolla | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | Other | . 9 23 | 25 | 30 | 4 | 1.799805 | Front-Wheel Drive | 1700 | Toyota | Corolla | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | Other | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 41134 18 | 20 | 24 | 4 | 2.099609 | Front-Wheel Drive | 2100 | Saab | 900 | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | Other | . 41135 23 | 26 | 33 | 4 | 1.900391 | Front-Wheel Drive | 1600 | Saturn | SL | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | Other | . 41136 21 | 24 | 30 | 4 | 1.900391 | Front-Wheel Drive | 1750 | Saturn | SL | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | Other | . 41137 24 | 28 | 33 | 4 | 1.900391 | Front-Wheel Drive | 1500 | Saturn | SL | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | Other | . 41138 21 | 25 | 32 | 4 | 1.900391 | Front-Wheel Drive | 1700 | Saturn | SL | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | Other | . 41139 19 | 22 | 26 | 4 | 2.199219 | Front-Wheel Drive | 1900 | Subaru | Legacy | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | Other | . 41140 20 | 23 | 28 | 4 | 2.199219 | Front-Wheel Drive | 1850 | Subaru | Legacy | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | Other | . 41141 18 | 21 | 24 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | 2000 | Subaru | Legacy AWD | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | Other | . 41142 18 | 21 | 24 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | 2000 | Subaru | Legacy AWD | 0 | 2013-01-01 00:00:00-05:00 | 1993 | False | 5 | True | Other | . 41143 16 | 18 | 21 | 4 | 2.199219 | 4-Wheel or All-Wheel Drive | 2900 | Subaru | Legacy AWD Turbo | 0 | 2013-01-01 00:00:00-05:00 | 1993 | True | 4 | True | Other | . 41144 rows × 16 columns . values3 =[{&#39;Chevrolet&#39;, &#39;Ford&#39;, &#39;Dodge&#39;, &#39;GMC&#39;, &#39;Tesla&#39;}] #this doesn&#39;t seem to work for the conditionlist in np.select and np.where values3 . [{&#39;Chevrolet&#39;, &#39;Dodge&#39;, &#39;Ford&#39;, &#39;GMC&#39;, &#39;Tesla&#39;}] . Master Aggregation . unstacking is helpful to rotate rows by mapping to columns | . Let&#39;s compare mileadge by country by year... . (autos2 .groupby(&#39;year&#39;) .mean() ) . city08 comb08 highway08 cylinders displ fuelCost08 range speeds . year . 1984 17.982688 | 19.881874 | 23.075356 | 5.385438 | 3.164062 | 2313.543788 | 0.000000 | 3.928208 | . 1985 17.878307 | 19.808348 | 23.042328 | 5.375661 | 3.164062 | 2334.509112 | 0.000000 | 3.924750 | . 1986 17.665289 | 19.550413 | 22.699174 | 5.425620 | 3.183594 | 2354.049587 | 0.000000 | 3.984298 | . 1987 17.310345 | 19.228549 | 22.445068 | 5.412189 | 3.173828 | 2403.648757 | 0.000000 | 4.037690 | . 1988 17.333628 | 19.328319 | 22.702655 | 5.461947 | 3.195312 | 2387.035398 | 0.000000 | 4.129204 | . 1989 17.143972 | 19.125759 | 22.465742 | 5.488291 | 3.208984 | 2433.434519 | 0.000000 | 4.166522 | . 1990 17.033395 | 19.000928 | 22.337662 | 5.496289 | 3.216797 | 2436.178108 | 0.000000 | 4.238404 | . 1991 16.848940 | 18.825972 | 22.253534 | 5.598940 | 3.267578 | 2490.856890 | 0.000000 | 4.301237 | . 1992 16.805531 | 18.862623 | 22.439786 | 5.623550 | 3.275391 | 2494.736842 | 0.000000 | 4.318466 | . 1993 16.998170 | 19.104300 | 22.780421 | 5.602928 | 3.248047 | 2454.620311 | 0.000000 | 4.339433 | . 1994 16.918534 | 19.012220 | 22.725051 | 5.704684 | 3.333984 | 2461.507128 | 0.000000 | 4.332994 | . 1995 16.569804 | 18.797311 | 22.671148 | 5.892451 | 3.472656 | 2497.828335 | 0.000000 | 4.356774 | . 1996 17.289780 | 19.584735 | 23.569211 | 5.627426 | 3.234375 | 2375.032342 | 0.000000 | 4.364812 | . 1997 17.135171 | 19.429134 | 23.451444 | 5.666667 | 3.226562 | 2405.511811 | 0.000000 | 4.402887 | . 1998 17.113300 | 19.518473 | 23.546798 | 5.633005 | 3.201172 | 2382.635468 | 0.229064 | 4.419951 | . 1999 17.272300 | 19.611502 | 23.552817 | 5.667840 | 3.189453 | 2392.194836 | 0.570423 | 4.421362 | . 2000 17.221429 | 19.526190 | 23.414286 | 5.713095 | 3.201172 | 2429.702381 | 0.348810 | 4.508333 | . 2001 17.275521 | 19.479693 | 23.328211 | 5.720088 | 3.193359 | 2448.463227 | 0.261251 | 4.660812 | . 2002 16.893333 | 19.168205 | 23.030769 | 5.827692 | 3.263672 | 2479.794872 | 0.136410 | 4.757949 | . 2003 16.780651 | 19.000958 | 22.836207 | 5.942529 | 3.357422 | 2525.574713 | 0.090996 | 4.911877 | . 2004 16.740642 | 19.067736 | 23.064171 | 5.957219 | 3.394531 | 2512.566845 | 0.000000 | 4.976827 | . 2005 16.851630 | 19.193825 | 23.297599 | 5.944254 | 3.400391 | 2518.610635 | 0.000000 | 5.192110 | . 2006 16.626812 | 18.959239 | 23.048913 | 6.100543 | 3.548828 | 2539.175725 | 0.000000 | 5.315217 | . 2007 16.605684 | 18.978686 | 23.083481 | 6.166075 | 3.628906 | 2535.923623 | 0.000000 | 5.610124 | . 2008 16.900590 | 19.276327 | 23.455771 | 6.192923 | 3.638672 | 2536.436394 | 0.084246 | 5.773378 | . 2009 17.334459 | 19.735642 | 24.017736 | 6.122466 | 3.625000 | 2427.027027 | 0.000000 | 6.043074 | . 2010 18.105500 | 20.588819 | 24.947701 | 5.965735 | 3.501953 | 2351.082056 | 0.000000 | 6.271416 | . 2011 18.669027 | 21.011504 | 25.169912 | 5.980531 | 3.521484 | 2333.982301 | 0.259292 | 6.560177 | . 2012 19.362847 | 21.819444 | 26.105035 | 5.910590 | 3.460938 | 2289.973958 | 0.782118 | 6.706597 | . 2013 20.661318 | 23.125000 | 27.504223 | 5.762669 | 3.328125 | 2210.768581 | 1.255068 | 6.896959 | . 2014 21.033469 | 23.531429 | 27.978776 | 5.745306 | 3.289062 | 2198.040816 | 1.405714 | 6.985306 | . 2015 21.445830 | 24.038971 | 28.586906 | 5.635230 | 3.205078 | 2148.869836 | 2.208106 | 7.035853 | . 2016 22.591918 | 25.150555 | 29.606973 | 5.463550 | 3.054688 | 2091.204437 | 4.546751 | 7.080032 | . 2017 22.761021 | 25.249033 | 29.554524 | 5.453210 | 3.025391 | 2096.558391 | 4.336427 | 7.225058 | . 2018 22.564732 | 25.019345 | 29.273065 | 5.438988 | 2.992188 | 2103.980655 | 3.519345 | 7.017113 | . 2019 23.318147 | 25.627942 | 29.664389 | 5.368261 | 2.964844 | 2093.545938 | 5.565680 | 7.136674 | . 2020 22.679426 | 25.267943 | 29.617225 | 5.071770 | 2.644531 | 2023.444976 | 2.282297 | 7.746411 | . (autos2 .groupby(&#39;year&#39;) [[&#39;comb08&#39;, &#39;speeds&#39;]] .mean() ) . comb08 speeds . year . 1984 19.881874 | 3.928208 | . 1985 19.808348 | 3.924750 | . 1986 19.550413 | 3.984298 | . 1987 19.228549 | 4.037690 | . 1988 19.328319 | 4.129204 | . 1989 19.125759 | 4.166522 | . 1990 19.000928 | 4.238404 | . 1991 18.825972 | 4.301237 | . 1992 18.862623 | 4.318466 | . 1993 19.104300 | 4.339433 | . 1994 19.012220 | 4.332994 | . 1995 18.797311 | 4.356774 | . 1996 19.584735 | 4.364812 | . 1997 19.429134 | 4.402887 | . 1998 19.518473 | 4.419951 | . 1999 19.611502 | 4.421362 | . 2000 19.526190 | 4.508333 | . 2001 19.479693 | 4.660812 | . 2002 19.168205 | 4.757949 | . 2003 19.000958 | 4.911877 | . 2004 19.067736 | 4.976827 | . 2005 19.193825 | 5.192110 | . 2006 18.959239 | 5.315217 | . 2007 18.978686 | 5.610124 | . 2008 19.276327 | 5.773378 | . 2009 19.735642 | 6.043074 | . 2010 20.588819 | 6.271416 | . 2011 21.011504 | 6.560177 | . 2012 21.819444 | 6.706597 | . 2013 23.125000 | 6.896959 | . 2014 23.531429 | 6.985306 | . 2015 24.038971 | 7.035853 | . 2016 25.150555 | 7.080032 | . 2017 25.249033 | 7.225058 | . 2018 25.019345 | 7.017113 | . 2019 25.627942 | 7.136674 | . 2020 25.267943 | 7.746411 | . %%timeit (autos2 .groupby(&#39;year&#39;) [[&#39;comb08&#39;, &#39;speeds&#39;]] .mean()#calculate mean only after columns of interest have been selected -- faster! ) . 1.44 ms ± 44.6 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) . %%timeit (autos2 .groupby(&#39;year&#39;) .mean()#calculate mean for all columns [[&#39;comb08&#39;, &#39;speeds&#39;]] ) . 3.83 ms ± 3.91 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . Let&#39;s plot . import matplotlib.pyplot as plt import seaborn as sns (autos2 .groupby(&#39;year&#39;) [[&#39;comb08&#39;, &#39;speeds&#39;]] .mean() .plot() ) . &lt;AxesSubplot:xlabel=&#39;year&#39;&gt; . import matplotlib.pyplot as plt import seaborn as sns (autos2 .groupby(&#39;year&#39;) [[&#39;comb08&#39;, &#39;speeds&#39;]] # .quantile(.99) .std() .plot() ) . &lt;AxesSubplot:xlabel=&#39;year&#39;&gt; . (autos2 .assign(country=autos2.make.apply(country)) .groupby([&#39;year&#39;, &#39;country&#39;]) #these become hierarchichal index in pandas .mean() ) . city08 comb08 highway08 cylinders displ fuelCost08 range speeds . year country . 1984 Other 19.384615 | 21.417330 | 24.847038 | 4.908046 | 2.691406 | 2118.125553 | 0.000000 | 3.969054 | . US 16.079232 | 17.797119 | 20.669868 | 6.033613 | 3.808594 | 2578.871549 | 0.000000 | 3.872749 | . 1985 Other 19.284768 | 21.373068 | 24.816777 | 4.871965 | 2.636719 | 2141.997792 | 0.000000 | 3.958057 | . US 16.275472 | 18.025157 | 21.020126 | 5.949686 | 3.765625 | 2553.899371 | 0.000000 | 3.886792 | . 1986 Other 19.167183 | 21.213622 | 24.650155 | 4.804954 | 2.537109 | 2149.148607 | 0.000000 | 4.069659 | . US 15.945035 | 17.645390 | 20.464539 | 6.136525 | 3.925781 | 2588.741135 | 0.000000 | 3.886525 | . 1987 Other 18.633381 | 20.710414 | 24.186876 | 4.825963 | 2.583984 | 2227.318117 | 0.000000 | 4.142653 | . US 15.611722 | 17.326007 | 20.208791 | 6.164835 | 3.931641 | 2630.036630 | 0.000000 | 3.902930 | . 1988 Other 18.668224 | 20.814642 | 24.437695 | 4.819315 | 2.531250 | 2207.476636 | 0.000000 | 4.205607 | . US 15.577869 | 17.372951 | 20.420082 | 6.307377 | 4.066406 | 2623.258197 | 0.000000 | 4.028689 | . ... ... ... | ... | ... | ... | ... | ... | ... | ... | . 2016 Other 21.903749 | 24.439716 | 28.866261 | 5.493414 | 2.992188 | 2127.608916 | 1.017224 | 7.296859 | . US 25.061818 | 27.701818 | 32.265455 | 5.356364 | 3.277344 | 1960.545455 | 17.214545 | 6.301818 | . 2017 Other 22.423795 | 24.910521 | 29.208456 | 5.431662 | 2.919922 | 2114.110128 | 1.243854 | 7.474926 | . US 24.003623 | 26.496377 | 30.829710 | 5.532609 | 3.419922 | 2031.884058 | 15.731884 | 6.304348 | . 2018 Other 22.310442 | 24.779868 | 29.042333 | 5.396990 | 2.886719 | 2121.448730 | 1.135466 | 7.391345 | . US 23.526690 | 25.925267 | 30.145907 | 5.597865 | 3.390625 | 2037.900356 | 12.537367 | 5.601423 | . 2019 Other 23.084221 | 25.456922 | 29.560503 | 5.315586 | 2.839844 | 2093.659245 | 2.581801 | 7.545983 | . US 24.169014 | 26.250000 | 30.042254 | 5.559859 | 3.419922 | 2093.133803 | 16.419014 | 5.647887 | . 2020 Other 22.579487 | 25.174359 | 29.543590 | 5.148718 | 2.693359 | 2050.256410 | 2.446154 | 7.743590 | . US 24.071429 | 26.571429 | 30.642857 | 4.000000 | 1.978516 | 1650.000000 | 0.000000 | 7.785714 | . 74 rows × 8 columns . def second_to_last(ser): return ser.iloc[-2]#return that specific row #ser.iloc[:-4] (autos2 .assign(country=autos2.make.apply(country)) .groupby([&#39;year&#39;, &#39;country&#39;]) .agg([&#39;min&#39;, &#39;mean&#39;, second_to_last]) ) . city08 comb08 highway08 cylinders ... range automatic speeds ffs . min mean second_to_last min mean second_to_last min mean second_to_last min ... second_to_last min mean second_to_last min mean second_to_last min mean second_to_last . year country . 1984 Other 7 | 19.384615 | 14 | 8 | 21.417330 | 14 | 9 | 24.847038 | 15 | 2 | ... | 0 | False | 0.550840 | False | 3 | 3.969054 | 5 | False | 0.714554 | True | . US 8 | 16.079232 | 15 | 9 | 17.797119 | 17 | 10 | 20.669868 | 19 | 4 | ... | 0 | False | 0.521059 | False | 3 | 3.872749 | 4 | False | 0.638801 | NaN | . 1985 Other 7 | 19.284768 | 19 | 8 | 21.373068 | 20 | 9 | 24.816777 | 22 | 0 | ... | 0 | False | 0.554084 | True | 3 | 3.958057 | 4 | False | 0.889160 | True | . US 8 | 16.275472 | 14 | 10 | 18.025157 | 15 | 10 | 21.020126 | 17 | 3 | ... | 0 | False | 0.520755 | False | 3 | 3.886792 | 4 | False | 0.851351 | NaN | . 1986 Other 6 | 19.167183 | 10 | 7 | 21.213622 | 11 | 9 | 24.650155 | 12 | 0 | ... | 0 | False | 0.520124 | False | 3 | 4.069659 | 4 | False | 0.934211 | NaN | . US 9 | 15.945035 | 16 | 10 | 17.645390 | 17 | 11 | 20.464539 | 19 | 3 | ... | 0 | False | 0.533688 | False | 3 | 3.886525 | 4 | False | 0.795699 | NaN | . 1987 Other 6 | 18.633381 | 12 | 7 | 20.710414 | 12 | 9 | 24.186876 | 12 | 2 | ... | 0 | False | 0.516405 | True | 3 | 4.142653 | 4 | False | 0.949778 | True | . US 8 | 15.611722 | 12 | 9 | 17.326007 | 13 | 10 | 20.208791 | 14 | 3 | ... | 0 | False | 0.549451 | True | 3 | 3.902930 | 4 | False | 0.909457 | True | . 1988 Other 6 | 18.668224 | 12 | 7 | 20.814642 | 12 | 10 | 24.437695 | 12 | 2 | ... | 0 | False | 0.521807 | True | 3 | 4.205607 | 4 | False | 0.993681 | True | . US 8 | 15.577869 | 14 | 9 | 17.372951 | 14 | 10 | 20.420082 | 15 | 3 | ... | 0 | False | 0.569672 | True | 3 | 4.028689 | 4 | False | 0.936306 | True | . ... ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 2016 Other 10 | 21.903749 | 28 | 12 | 24.439716 | 30 | 13 | 28.866261 | 32 | 0 | ... | 0 | False | 0.837893 | True | 1 | 7.296859 | 7 | False | 0.000000 | False | . US 11 | 25.061818 | 91 | 12 | 27.701818 | 93 | 16 | 32.265455 | 94 | 0 | ... | 200 | False | 0.850909 | True | 1 | 6.301818 | 1 | False | 0.000000 | NaN | . 2017 Other 10 | 22.423795 | 21 | 11 | 24.910521 | 24 | 11 | 29.208456 | 28 | 0 | ... | 0 | False | 0.848574 | True | 1 | 7.474926 | 7 | False | 0.000000 | False | . US 11 | 24.003623 | 131 | 12 | 26.496377 | 126 | 15 | 30.829710 | 120 | 0 | ... | 310 | False | 0.858696 | True | 0 | 6.304348 | 1 | False | 0.000000 | NaN | . 2018 Other 9 | 22.310442 | 11 | 11 | 24.779868 | 12 | 11 | 29.042333 | 15 | 0 | ... | 0 | False | 0.863594 | True | 0 | 7.391345 | 0 | False | 0.000000 | NaN | . US 11 | 23.526690 | 120 | 14 | 25.925267 | 116 | 15 | 30.145907 | 112 | 0 | ... | 310 | False | 0.882562 | True | 0 | 5.601423 | 1 | False | 0.000000 | NaN | . 2019 Other 9 | 23.084221 | 19 | 11 | 25.456922 | 22 | 14 | 29.560503 | 27 | 0 | ... | 0 | False | 0.879961 | True | 0 | 7.545983 | 8 | False | 0.000000 | NaN | . US 11 | 24.169014 | 104 | 14 | 26.250000 | 104 | 15 | 30.042254 | 104 | 0 | ... | 345 | False | 0.915493 | True | 0 | 5.647887 | 1 | False | 0.000000 | NaN | . 2020 Other 13 | 22.579487 | 17 | 15 | 25.174359 | 20 | 18 | 29.543590 | 24 | 0 | ... | 0 | False | 0.871795 | True | 0 | 7.743590 | 0 | False | 0.000000 | False | . US 20 | 24.071429 | 21 | 22 | 26.571429 | 24 | 26 | 30.642857 | 28 | 4 | ... | 0 | False | 0.857143 | True | 0 | 7.785714 | 0 | False | 0.000000 | False | . 74 rows × 30 columns . (autos2 .assign(country=autos2.make.apply(country)) .groupby([&#39;year&#39;, &#39;country&#39;]) #these become hierarchichal index in pandas .mean() .plot() ) . &lt;AxesSubplot:xlabel=&#39;year,country&#39;&gt; . Unstacking and plotting . (autos2 .assign(country=autos2.make.apply(country)) .groupby([&#39;year&#39;, &#39;country&#39;]) #these become hierarchichal index in pandas .mean() .unstack() ) . city08 comb08 highway08 cylinders displ fuelCost08 range speeds . country Other US Other US Other US Other US Other US Other US Other US Other US . year . 1984 19.384615 | 16.079232 | 21.417330 | 17.797119 | 24.847038 | 20.669868 | 4.908046 | 6.033613 | 2.691406 | 3.808594 | 2118.125553 | 2578.871549 | 0.000000 | 0.000000 | 3.969054 | 3.872749 | . 1985 19.284768 | 16.275472 | 21.373068 | 18.025157 | 24.816777 | 21.020126 | 4.871965 | 5.949686 | 2.636719 | 3.765625 | 2141.997792 | 2553.899371 | 0.000000 | 0.000000 | 3.958057 | 3.886792 | . 1986 19.167183 | 15.945035 | 21.213622 | 17.645390 | 24.650155 | 20.464539 | 4.804954 | 6.136525 | 2.537109 | 3.925781 | 2149.148607 | 2588.741135 | 0.000000 | 0.000000 | 4.069659 | 3.886525 | . 1987 18.633381 | 15.611722 | 20.710414 | 17.326007 | 24.186876 | 20.208791 | 4.825963 | 6.164835 | 2.583984 | 3.931641 | 2227.318117 | 2630.036630 | 0.000000 | 0.000000 | 4.142653 | 3.902930 | . 1988 18.668224 | 15.577869 | 20.814642 | 17.372951 | 24.437695 | 20.420082 | 4.819315 | 6.307377 | 2.531250 | 4.066406 | 2207.476636 | 2623.258197 | 0.000000 | 0.000000 | 4.205607 | 4.028689 | . 1989 18.533040 | 15.139831 | 20.662261 | 16.908898 | 24.252570 | 19.887712 | 4.879589 | 6.366525 | 2.542969 | 4.171875 | 2250.000000 | 2698.093220 | 0.000000 | 0.000000 | 4.264317 | 4.025424 | . 1990 18.510109 | 14.850575 | 20.640747 | 16.577011 | 24.267496 | 19.485057 | 4.839813 | 6.466667 | 2.507812 | 4.265625 | 2238.258165 | 2728.735632 | 0.000000 | 0.000000 | 4.328149 | 4.105747 | . 1991 18.087943 | 14.803279 | 20.174468 | 16.599532 | 23.809929 | 19.683841 | 5.029787 | 6.538642 | 2.609375 | 4.351562 | 2348.581560 | 2725.761124 | 0.000000 | 0.000000 | 4.341844 | 4.234192 | . 1992 17.915374 | 14.895631 | 20.098731 | 16.735437 | 23.820874 | 20.063107 | 5.145275 | 6.446602 | 2.708984 | 4.250000 | 2373.272214 | 2703.762136 | 0.000000 | 0.000000 | 4.356841 | 4.252427 | . 1993 18.084866 | 15.007772 | 20.309760 | 16.896373 | 24.172560 | 20.230570 | 5.114569 | 6.497409 | 2.683594 | 4.281250 | 2333.097595 | 2677.202073 | 0.000000 | 0.000000 | 4.371994 | 4.279793 | . 1994 18.046474 | 14.952514 | 20.264423 | 16.829609 | 24.173077 | 20.201117 | 5.185897 | 6.608939 | 2.712891 | 4.414062 | 2326.041667 | 2697.625698 | 0.000000 | 0.000000 | 4.355769 | 4.293296 | . 1995 17.678914 | 14.533724 | 20.091054 | 16.422287 | 24.263578 | 19.747801 | 5.444089 | 6.715543 | 2.908203 | 4.507812 | 2355.191693 | 2759.677419 | 0.000000 | 0.000000 | 4.380192 | 4.313783 | . 1996 18.480545 | 14.926641 | 20.906615 | 16.961390 | 25.093385 | 20.544402 | 5.147860 | 6.579151 | 2.708984 | 4.277344 | 2250.291829 | 2622.586873 | 0.000000 | 0.000000 | 4.416342 | 4.262548 | . 1997 18.090909 | 14.978632 | 20.509470 | 16.991453 | 24.678030 | 20.683761 | 5.261364 | 6.581197 | 2.787109 | 4.218750 | 2319.128788 | 2600.427350 | 0.000000 | 0.000000 | 4.452652 | 4.290598 | . 1998 17.925267 | 15.288000 | 20.457295 | 17.408000 | 24.704626 | 20.944000 | 5.275801 | 6.436000 | 2.800781 | 4.105469 | 2295.373665 | 2578.800000 | 0.144128 | 0.420000 | 4.485765 | 4.272000 | . 1999 17.925125 | 15.709163 | 20.386023 | 17.756972 | 24.577371 | 21.099602 | 5.377704 | 6.362550 | 2.832031 | 4.042969 | 2312.728785 | 2582.470120 | 0.251248 | 1.334661 | 4.507488 | 4.215139 | . 2000 17.881849 | 15.714844 | 20.301370 | 17.757812 | 24.416096 | 21.128906 | 5.441781 | 6.332031 | 2.859375 | 3.978516 | 2385.958904 | 2529.492188 | 0.304795 | 0.449219 | 4.619863 | 4.253906 | . 2001 17.941267 | 15.643939 | 20.289026 | 17.496212 | 24.372488 | 20.768939 | 5.479134 | 6.310606 | 2.873047 | 3.976562 | 2399.536321 | 2568.371212 | 0.187017 | 0.443182 | 4.761978 | 4.412879 | . 2002 17.644412 | 15.083916 | 20.076923 | 16.979021 | 24.207547 | 20.195804 | 5.576197 | 6.433566 | 2.935547 | 4.058594 | 2425.689405 | 2610.139860 | 0.137881 | 0.132867 | 4.920174 | 4.367133 | . 2003 17.565101 | 14.826087 | 19.953020 | 16.628763 | 24.052349 | 19.806020 | 5.683221 | 6.588629 | 3.031250 | 4.171875 | 2480.604027 | 2637.625418 | 0.127517 | 0.000000 | 5.154362 | 4.307692 | . 2004 17.426290 | 14.928571 | 19.923833 | 16.805195 | 24.160934 | 20.165584 | 5.729730 | 6.558442 | 3.087891 | 4.199219 | 2476.719902 | 2607.305195 | 0.000000 | 0.000000 | 5.229730 | 4.308442 | . 2005 17.412170 | 15.196610 | 19.892078 | 17.132203 | 24.189437 | 20.664407 | 5.773823 | 6.447458 | 3.152344 | 4.132812 | 2493.455798 | 2592.881356 | 0.000000 | 0.000000 | 5.362801 | 4.688136 | . 2006 17.062575 | 15.300366 | 19.509025 | 17.285714 | 23.762936 | 20.875458 | 5.977136 | 6.476190 | 3.345703 | 4.171875 | 2527.496992 | 2574.725275 | 0.000000 | 0.000000 | 5.492178 | 4.776557 | . 2007 16.996403 | 15.489726 | 19.452038 | 17.626712 | 23.742206 | 21.202055 | 6.044365 | 6.513699 | 3.423828 | 4.210938 | 2544.664269 | 2510.958904 | 0.000000 | 0.000000 | 5.864508 | 4.883562 | . 2008 17.239869 | 15.770073 | 19.677985 | 17.937956 | 23.983571 | 21.697080 | 6.095290 | 6.518248 | 3.462891 | 4.222656 | 2551.369113 | 2486.678832 | 0.109529 | 0.000000 | 5.969332 | 5.120438 | . 2009 17.696803 | 16.148014 | 20.186329 | 18.259928 | 24.590959 | 22.140794 | 5.970232 | 6.620939 | 3.402344 | 4.351562 | 2433.076075 | 2407.220217 | 0.000000 | 0.000000 | 6.189636 | 5.563177 | . 2010 18.325342 | 17.278970 | 20.851598 | 19.600858 | 25.256849 | 23.785408 | 5.897260 | 6.223176 | 3.357422 | 4.050781 | 2374.429224 | 2263.304721 | 0.000000 | 0.000000 | 6.378995 | 5.866953 | . 2011 19.247387 | 16.817844 | 21.635308 | 19.014870 | 25.855981 | 22.973978 | 5.851336 | 6.394052 | 3.320312 | 4.167969 | 2326.248548 | 2358.736059 | 0.340302 | 0.000000 | 6.714286 | 6.066914 | . 2012 19.838052 | 17.802974 | 22.339751 | 20.111524 | 26.695357 | 24.167286 | 5.792752 | 6.297398 | 3.269531 | 4.085938 | 2282.502831 | 2314.498141 | 0.634202 | 1.267658 | 6.834655 | 6.286245 | . 2013 20.982888 | 19.453815 | 23.471658 | 21.823293 | 27.860963 | 26.164659 | 5.658824 | 6.152610 | 3.179688 | 3.884766 | 2208.288770 | 2220.080321 | 0.853476 | 2.763052 | 7.033155 | 6.385542 | . 2014 21.159919 | 20.506329 | 23.655870 | 23.012658 | 28.088057 | 27.523207 | 5.719636 | 5.852321 | 3.210938 | 3.615234 | 2212.196356 | 2139.029536 | 0.859312 | 3.683544 | 7.210526 | 6.046414 | . 2015 21.350000 | 21.817490 | 23.935294 | 24.441065 | 28.481373 | 28.996198 | 5.604902 | 5.752852 | 3.101562 | 3.605469 | 2164.215686 | 2089.353612 | 0.638235 | 8.296578 | 7.211765 | 6.353612 | . 2016 21.903749 | 25.061818 | 24.439716 | 27.701818 | 28.866261 | 32.265455 | 5.493414 | 5.356364 | 2.992188 | 3.277344 | 2127.608916 | 1960.545455 | 1.017224 | 17.214545 | 7.296859 | 6.301818 | . 2017 22.423795 | 24.003623 | 24.910521 | 26.496377 | 29.208456 | 30.829710 | 5.431662 | 5.532609 | 2.919922 | 3.419922 | 2114.110128 | 2031.884058 | 1.243854 | 15.731884 | 7.474926 | 6.304348 | . 2018 22.310442 | 23.526690 | 24.779868 | 25.925267 | 29.042333 | 30.145907 | 5.396990 | 5.597865 | 2.886719 | 3.390625 | 2121.448730 | 2037.900356 | 1.135466 | 12.537367 | 7.391345 | 5.601423 | . 2019 23.084221 | 24.169014 | 25.456922 | 26.250000 | 29.560503 | 30.042254 | 5.315586 | 5.559859 | 2.839844 | 3.419922 | 2093.659245 | 2093.133803 | 2.581801 | 16.419014 | 7.545983 | 5.647887 | . 2020 22.579487 | 24.071429 | 25.174359 | 26.571429 | 29.543590 | 30.642857 | 5.148718 | 4.000000 | 2.693359 | 1.978516 | 2050.256410 | 1650.000000 | 2.446154 | 0.000000 | 7.743590 | 7.785714 | . (autos2 .assign(country=autos2.make.apply(country)) .groupby([&#39;year&#39;, &#39;country&#39;]) #these become hierarchichal index in pandas .mean() .unstack() #see how this changes when you comment this --&gt; which would be wrong. .city08 .plot() .legend(bbox_to_anchor=(1,1)) ) . &lt;matplotlib.legend.Legend at 0x7fe42a295d90&gt; . (autos2 .assign(country=autos2.make.apply(country)) .groupby([&#39;year&#39;, &#39;country&#39;]) #these become hierarchichal index in pandas .mean() .unstack() #see how this changes when you comment this --&gt; which would be wrong. .city08 .rolling(2)#let&#39;s smooth byy taking a 2 year window for averaging .mean() .plot() .legend(bbox_to_anchor=(1,1)) ) . &lt;matplotlib.legend.Legend at 0x7fe4186fe940&gt; . def vals_gt(df_, num): return df_[df_.gt(num)].dropna() #[df_.gt(num)] this above is like building a mask -- like a boolean operation (autos2 .assign(country=autos2.make.apply(country)) .groupby([&#39;year&#39;, &#39;country&#39;]) .count() .pipe(vals_gt, 700) #let&#39;s use `pipe` to connect what we have manipulated in the data so that it can be passed to the function being called ) . city08 comb08 highway08 cylinders displ drive fuelCost08 make model range createdOn automatic speeds ffs . year country . 1984 Other 1131.0 | 1131.0 | 1131.0 | 1131.0 | 1131.0 | 1131.0 | 1131.0 | 1131.0 | 1131.0 | 1131.0 | 1131.0 | 1131.0 | 1131.0 | 1065.0 | . 1985 Other 906.0 | 906.0 | 906.0 | 906.0 | 906.0 | 906.0 | 906.0 | 906.0 | 906.0 | 906.0 | 906.0 | 906.0 | 906.0 | 821.0 | . 1991 Other 705.0 | 705.0 | 705.0 | 705.0 | 705.0 | 705.0 | 705.0 | 705.0 | 705.0 | 705.0 | 705.0 | 705.0 | 705.0 | 705.0 | . 1992 Other 709.0 | 709.0 | 709.0 | 709.0 | 709.0 | 709.0 | 709.0 | 709.0 | 709.0 | 709.0 | 709.0 | 709.0 | 709.0 | 707.0 | . 1993 Other 707.0 | 707.0 | 707.0 | 707.0 | 707.0 | 707.0 | 707.0 | 707.0 | 707.0 | 707.0 | 707.0 | 707.0 | 707.0 | 707.0 | . 2017 Other 1017.0 | 1017.0 | 1017.0 | 1017.0 | 1017.0 | 1017.0 | 1017.0 | 1017.0 | 1017.0 | 1017.0 | 1017.0 | 1017.0 | 1017.0 | 766.0 | . 2018 Other 1063.0 | 1063.0 | 1063.0 | 1063.0 | 1063.0 | 1063.0 | 1063.0 | 1063.0 | 1063.0 | 1063.0 | 1063.0 | 1063.0 | 1063.0 | 844.0 | . 2019 Other 1033.0 | 1033.0 | 1033.0 | 1033.0 | 1033.0 | 1033.0 | 1033.0 | 1033.0 | 1033.0 | 1033.0 | 1033.0 | 1033.0 | 1033.0 | 855.0 | . .",
            "url": "https://sand-train.github.io/blogs/2021/09/03/draft_2021-09-04-effective_pandas.html",
            "relUrl": "/2021/09/03/draft_2021-09-04-effective_pandas.html",
            "date": " • Sep 3, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Bear Classifier",
            "content": "Let&#39;s load our Dataset . import os os.listdir(&#39;./gdrive&#39;) . [&#39;Othercomputers&#39;, &#39;MyDrive&#39;, &#39;.file-revisions-by-id&#39;, &#39;.shortcut-targets-by-id&#39;, &#39;.Trash-0&#39;] . from fastai.vision.all import * path = Path(r&quot;./gdrive/MyDrive/Colab Notebooks/images/bears&quot;) # from pathlib import Path path . Path(&#39;.&#39;) . Path.BASE_PATH = path type(Path.BASE_PATH) . pathlib.PosixPath . dest = path / &#39;black&#39; / &#39;00000000.jpg&#39; im = Image.open(dest) im.to_thumb(128,128) . bear_types = &#39;grizzly&#39;,&#39;black&#39;,&#39;teddys&#39; . fns = get_image_files(path) # path, and returns a list of all of the images in that path fns[-1] . Path(&#39;teddys/00000101.png&#39;) . def parent_label_multi(file_name): return [parent_label(file_name)] #returns a list of labels based on the name of the folder a file is in . bears = DataBlock( blocks=(ImageBlock, MultiCategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label_multi, item_tfms=Resize(128)) . Datasets using the data block API . Using the bears data block, we can create a Datasets object from this by passing the source -- in this case, the path to our images. . dsets=bears.datasets(path) len(dsets.train),len(dsets.valid) . (418, 104) . dsets now contain a train and valid dataset. . x,y = dsets.train[0] x,y . (PILImage mode=RGB size=375x500, TensorMultiCategory([1., 0., 0.])) . firstSample_OH=dsets.train[0][1] firstSample_OH . TensorMultiCategory([1., 0., 0.]) . idxs = torch.where(firstSample_OH==1.)[0] dsets.train.vocab[idxs] . (#1) [&#39;black&#39;] . DataLoaders using the data block API . Now that we have a template bears in the form of a DataBlock object, we can use it to create a DataLoaders pointing to the path where the source of our data is. . Recall: . DataLoaders:: An object that contains a training DataLoader and a validation DataLoader . dls = bears.dataloaders(path) dls.train.show_batch(max_n=16, nrows=4, unique=True) . xb,yb = dls.one_batch() xb.shape,yb.shape . (torch.Size([64, 3, 128, 128]), torch.Size([64, 3])) . xb[0] . TensorImage([[[0.9961, 0.9961, 0.9961, ..., 0.9961, 0.9961, 0.9961], [0.9961, 0.9961, 0.9961, ..., 0.9961, 0.9961, 0.9961], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], ..., [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000]], [[0.9961, 0.9961, 0.9961, ..., 0.9961, 0.9961, 0.9961], [0.9961, 0.9961, 0.9961, ..., 0.9961, 0.9961, 0.9961], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], ..., [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000]], [[0.9961, 0.9961, 0.9961, ..., 0.9961, 0.9961, 0.9961], [0.9961, 0.9961, 0.9961, ..., 0.9961, 0.9961, 0.9961], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], ..., [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000]]], device=&#39;cuda:0&#39;) . yb[0] #an example row from the dependent variable . TensorMultiCategory([0., 0., 1.], device=&#39;cuda:0&#39;) . df_y_OH = pd.DataFrame(yb) df_y_OH.columns = bear_types df_y_OH.head() . grizzly black teddys . 0 0.0 | 0.0 | 1.0 | . 1 0.0 | 0.0 | 1.0 | . 2 0.0 | 0.0 | 1.0 | . 3 1.0 | 0.0 | 0.0 | . 4 0.0 | 0.0 | 1.0 | . bears.summary(path) . Setting-up type transforms pipelines Collecting items from gdrive/MyDrive/Colab Notebooks/images/bears Found 522 items 2 datasets of sizes 418,104 Setting up Pipeline: PILBase.create Setting up Pipeline: parent_label_multi -&gt; MultiCategorize -- {&#39;vocab&#39;: None, &#39;sort&#39;: True, &#39;add_na&#39;: False} -&gt; OneHotEncode -- {&#39;c&#39;: None} Building one sample Pipeline: PILBase.create starting from gdrive/MyDrive/Colab Notebooks/images/bears/black/00000015.jpg applying PILBase.create gives PILImage mode=RGB size=375x500 Pipeline: parent_label_multi -&gt; MultiCategorize -- {&#39;vocab&#39;: None, &#39;sort&#39;: True, &#39;add_na&#39;: False} -&gt; OneHotEncode -- {&#39;c&#39;: None} starting from gdrive/MyDrive/Colab Notebooks/images/bears/black/00000015.jpg applying parent_label_multi gives [black] applying MultiCategorize -- {&#39;vocab&#39;: None, &#39;sort&#39;: True, &#39;add_na&#39;: False} gives TensorMultiCategory([0]) applying OneHotEncode -- {&#39;c&#39;: None} gives TensorMultiCategory([1., 0., 0.]) Final sample: (PILImage mode=RGB size=375x500, TensorMultiCategory([1., 0., 0.])) Collecting items from gdrive/MyDrive/Colab Notebooks/images/bears Found 522 items 2 datasets of sizes 418,104 Setting up Pipeline: PILBase.create Setting up Pipeline: parent_label_multi -&gt; MultiCategorize -- {&#39;vocab&#39;: None, &#39;sort&#39;: True, &#39;add_na&#39;: False} -&gt; OneHotEncode -- {&#39;c&#39;: None} Setting up after_item: Pipeline: Resize -- {&#39;size&#39;: (128, 128), &#39;method&#39;: &#39;crop&#39;, &#39;pad_mode&#39;: &#39;reflection&#39;, &#39;resamples&#39;: (2, 0), &#39;p&#39;: 1.0} -&gt; ToTensor Setting up before_batch: Pipeline: Setting up after_batch: Pipeline: IntToFloatTensor -- {&#39;div&#39;: 255.0, &#39;div_mask&#39;: 1} Building one batch Applying item_tfms to the first sample: Pipeline: Resize -- {&#39;size&#39;: (128, 128), &#39;method&#39;: &#39;crop&#39;, &#39;pad_mode&#39;: &#39;reflection&#39;, &#39;resamples&#39;: (2, 0), &#39;p&#39;: 1.0} -&gt; ToTensor starting from (PILImage mode=RGB size=375x500, TensorMultiCategory([1., 0., 0.])) applying Resize -- {&#39;size&#39;: (128, 128), &#39;method&#39;: &#39;crop&#39;, &#39;pad_mode&#39;: &#39;reflection&#39;, &#39;resamples&#39;: (2, 0), &#39;p&#39;: 1.0} gives (PILImage mode=RGB size=128x128, TensorMultiCategory([1., 0., 0.])) applying ToTensor gives (TensorImage of size 3x128x128, TensorMultiCategory([1., 0., 0.])) Adding the next 3 samples No before_batch transform to apply Collating items in a batch Applying batch_tfms to the batch built Pipeline: IntToFloatTensor -- {&#39;div&#39;: 255.0, &#39;div_mask&#39;: 1} starting from (TensorImage of size 4x3x128x128, TensorMultiCategory of size 4x3) applying IntToFloatTensor -- {&#39;div&#39;: 255.0, &#39;div_mask&#39;: 1} gives (TensorImage of size 4x3x128x128, TensorMultiCategory of size 4x3) . Let&#39;s train our model . We will find a learning rate using learn.lr_find() . learn = cnn_learner(dls, resnet50, metrics=partial(accuracy_multi), ) # cbs=[WandbCallback(), SaveModelCallback()]) learn.lr_find() . Downloading: &#34;https://download.pytorch.org/models/resnet50-0676ba61.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet50-0676ba61.pth /usr/local/lib/python3.7/dist-packages/torch/nn/functional.py:718: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at /pytorch/c10/core/TensorImpl.h:1156.) return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode) . SuggestedLRs(valley=0.0003981071640737355) . We will now train our model . learn = cnn_learner(dls, resnet50, metrics=partial(accuracy_multi), #cbs=[WandbCallback(), SaveModelCallback()] ) learn.fine_tune(5, base_lr=0.0003981071640737355, freeze_epochs=4) . epoch train_loss valid_loss accuracy_multi time . 0 | 0.989574 | 0.675743 | 0.628205 | 00:19 | . 1 | 0.810696 | 0.264667 | 0.887821 | 00:05 | . 2 | 0.627263 | 0.161804 | 0.948718 | 00:05 | . 3 | 0.490887 | 0.135624 | 0.958333 | 00:05 | . epoch train_loss valid_loss accuracy_multi time . 0 | 0.164186 | 0.131268 | 0.951923 | 00:06 | . 1 | 0.137333 | 0.127039 | 0.955128 | 00:06 | . 2 | 0.117020 | 0.116154 | 0.961538 | 00:06 | . 3 | 0.102201 | 0.112964 | 0.964744 | 00:06 | . 4 | 0.097269 | 0.109486 | 0.967949 | 00:06 | . Let&#39;s get predictions . preds, targs = learn.get_preds() xs = torch.linspace(0.05, 0.95, 10000) accs = [accuracy_multi(preds, targs, thresh=i, sigmoid=False) for i in xs] plt.plot(xs, accs) . [&lt;matplotlib.lines.Line2D at 0x7fda9365f310&gt;] . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . Let&#39;s use our trained model and classify some images . uploader = widgets.FileUpload() uploader . img = PILImage.create(uploader.data[0]) img.to_thumb(512) . learn.predict(img) . ((#0) [], tensor([False, False, False]), tensor([0.1184, 0.4531, 0.0730])) . img = PILImage.create(uploader.data[0]) img.to_thumb(512) . learn.predict(img) . ((#1) [&#39;grizzly&#39;], tensor([False, True, False]), tensor([0.0252, 0.9968, 0.0782])) . We can see our classifier has some limitations when it is presented with an image of a panda; it thinks it is a Black bear! . TODO: Need to assign different labels img = PILImage.create(uploader.data[0]) img.to_thumb(512) . learn.predict(img) . ((#1) [&#39;black&#39;], tensor([ True, False, False]), tensor([0.9285, 0.2594, 0.2288])) .",
            "url": "https://sand-train.github.io/blogs/2021/08/29/Bear-Classifier.html",
            "relUrl": "/2021/08/29/Bear-Classifier.html",
            "date": " • Aug 29, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sand-train.github.io/blogs/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sand-train.github.io/blogs/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sand-train.github.io/blogs/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sand-train.github.io/blogs/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}